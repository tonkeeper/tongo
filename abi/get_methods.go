package abi

// Code autogenerated. DO NOT EDIT.

import (
	"context"
	"fmt"
	"github.com/tonkeeper/tongo/boc"
	"github.com/tonkeeper/tongo/tlb"
	"github.com/tonkeeper/tongo/ton"
)

var KnownGetMethodsDecoder = map[string][]func(tlb.VmStack) (string, any, error){
	"dnsresolve":                         {DecodeDnsresolve_RecordsResult},
	"estimate_swap_out":                  {DecodeEstimateSwapOut_DedustResult},
	"get_amm_contract_data":              {DecodeGetAmmContractData_StormResult},
	"get_amm_name":                       {DecodeGetAmmName_StormResult},
	"get_amm_state":                      {DecodeGetAmmState_StormResult},
	"get_amm_status":                     {DecodeGetAmmStatus_StormResult},
	"get_asset":                          {DecodeGetAsset_DedustResult},
	"get_assets":                         {DecodeGetAssets_DedustResult},
	"get_auction_info":                   {DecodeGetAuctionInfoResult},
	"get_authority_address":              {DecodeGetAuthorityAddressResult},
	"get_balances":                       {DecodeGetBalances_DedustResult, DecodeGetBalancesResult},
	"get_bill_address":                   {DecodeGetBillAddressResult},
	"get_bill_amount":                    {DecodeGetBillAmountResult},
	"get_channel_data":                   {DecodeGetChannelDataResult},
	"get_collection_data":                {DecodeGetCollectionDataResult},
	"get_cron_info":                      {DecodeGetCronInfoResult},
	"get_domain":                         {DecodeGetDomainResult},
	"get_editor":                         {DecodeGetEditorResult},
	"get_exchange_settings":              {DecodeGetExchangeSettings_StormResult},
	"get_executor_balances":              {DecodeGetExecutorBalances_StormResult},
	"get_executor_collection_address":    {DecodeGetExecutorCollectionAddress_StormResult},
	"get_executor_vaults_whitelist":      {DecodeGetExecutorVaultsWhitelist_StormResult},
	"get_expected_outputs":               {DecodeGetExpectedOutputs_StonfiResult},
	"get_extensions":                     {DecodeGetExtensionsResult},
	"get_fix_price_data_v4":              {DecodeGetFixPriceDataV4Result},
	"get_full_domain":                    {DecodeGetFullDomainResult},
	"get_jetton_data":                    {DecodeGetJettonDataResult},
	"get_last_clean_time":                {DecodeGetLastCleanTimeResult},
	"get_last_fill_up_time":              {DecodeGetLastFillUpTimeResult},
	"get_liquidity_deposit_address":      {DecodeGetLiquidityDepositAddress_DedustResult},
	"get_locker_bill_data":               {DecodeGetLockerBillDataResult},
	"get_locker_data":                    {DecodeGetLockerDataResult},
	"get_lockup_data":                    {DecodeGetLockupDataResult},
	"get_lp_account_address":             {DecodeGetLpAccountAddress_StonfiResult},
	"get_lp_account_data":                {DecodeGetLpAccountData_StonfiResult},
	"get_lp_data":                        {DecodeGetLpData_MegatonResult},
	"get_lp_mining_data":                 {DecodeGetLpMiningData_MegatonResult},
	"get_lp_minter_address":              {DecodeGetLpMinterAddress_StormResult},
	"get_lp_swap_data":                   {DecodeGetLpSwapData_MegatonResult},
	"get_member":                         {DecodeGetMember_WhalesNominatorResult},
	"get_members_raw":                    {DecodeGetMembersRaw_WhalesNominatorResult},
	"get_mining_data":                    {DecodeGetMiningData_MegatonResult},
	"get_multisig_data":                  {DecodeGetMultisigDataResult},
	"get_next_admin_address":             {DecodeGetNextAdminAddressResult},
	"get_next_proof_info":                {DecodeGetNextProofInfoResult},
	"get_nft_address_by_index":           {DecodeGetNftAddressByIndexResult},
	"get_nft_api_info":                   {DecodeGetNftApiInfoResult},
	"get_nft_content":                    {DecodeGetNftContentResult},
	"get_nft_data":                       {DecodeGetNftDataResult},
	"get_nominator_data":                 {DecodeGetNominatorDataResult},
	"get_oracle_data":                    {DecodeGetOracleData_StormResult},
	"get_order_data":                     {DecodeGetOrderDataResult},
	"get_params":                         {DecodeGetParams_WhalesNominatorResult},
	"get_payment_info":                   {DecodeGetPaymentInfo_SubscriptionV2Result},
	"get_plugin_list":                    {DecodeGetPluginListResult},
	"get_pool_address":                   {DecodeGetPoolAddress_StonfiResult},
	"get_pool_data":                      {DecodeGetPoolData_DaolamaResult, DecodeGetPoolData_StonfiResult, DecodeGetPoolData_StonfiV2Result, DecodeGetPoolData_TfResult},
	"get_pool_full_data":                 {DecodeGetPoolFullDataResult},
	"get_pool_status":                    {DecodeGetPoolStatusResult},
	"get_position_manager_contract_data": {DecodeGetPositionManagerContractData_StormResult},
	"get_pow_params":                     {DecodeGetPowParamsResult},
	"get_public_key":                     {DecodeGetPublicKeyResult},
	"get_referral_collection_address":    {DecodeGetReferralCollectionAddress_StormResult},
	"get_referral_data":                  {DecodeGetReferralData_StormResult},
	"get_referral_vaults_whitelist":      {DecodeGetReferralVaultsWhitelist_StormResult},
	"get_reserves":                       {DecodeGetReserves_DedustResult},
	"get_revoked_time":                   {DecodeGetRevokedTimeResult},
	"get_router_data":                    {DecodeGetRouterData_StonfiResult, DecodeGetRouterData_StonfiV2Result},
	"get_router_version":                 {DecodeGetRouterVersion_StonfiV2Result},
	"get_sale_data":                      {DecodeGetSaleData_BasicResult, DecodeGetSaleData_GetgemsResult, DecodeGetSaleData_GetgemsAuctionResult},
	"get_spot_price":                     {DecodeGetSpotPrice_StormResult},
	"get_staking_status":                 {DecodeGetStakingStatusResult},
	"get_status":                         {DecodeGetStatusResult},
	"get_storage_contract_address":       {DecodeGetStorageContractAddressResult},
	"get_storage_contract_data":          {DecodeGetStorageContractDataResult},
	"get_storage_params":                 {DecodeGetStorageParamsResult},
	"get_subscription_data":              {DecodeGetSubscriptionDataResult},
	"get_subscription_info":              {DecodeGetSubscriptionInfo_V2Result},
	"get_subwallet_id":                   {DecodeGetSubwalletIdResult},
	"get_target_balances":                {DecodeGetTargetBalances_DedustResult},
	"get_telemint_auction_config":        {DecodeGetTelemintAuctionConfigResult},
	"get_telemint_auction_state":         {DecodeGetTelemintAuctionStateResult},
	"get_telemint_token_name":            {DecodeGetTelemintTokenNameResult},
	"get_terminal_amm_price":             {DecodeGetTerminalAmmPrice_StormResult},
	"get_timeout":                        {DecodeGetTimeoutResult},
	"get_torrent_hash":                   {DecodeGetTorrentHashResult},
	"get_trade_fee":                      {DecodeGetTradeFee_DedustResult},
	"get_validator_controller_data":      {DecodeGetValidatorControllerDataResult},
	"get_vamm_type":                      {DecodeGetVammType_StormResult},
	"get_vault_address":                  {DecodeGetVaultAddress_DedustResult},
	"get_vault_contract_data":            {DecodeGetVaultContractData_StormResult},
	"get_vault_data":                     {DecodeGetVaultData_StonfiV2Result, DecodeGetVaultData_StormResult},
	"get_vault_type":                     {DecodeGetVaultType_StormResult},
	"get_vault_whitelisted_addresses":    {DecodeGetVaultWhitelistedAddresses_StormResult},
	"get_wallet_address":                 {DecodeGetWalletAddressResult},
	"get_wallet_data":                    {DecodeGetWalletDataResult},
	"get_wallet_params":                  {DecodeGetWalletParamsResult},
	"is_active":                          {DecodeIsActiveResult},
	"is_claimed":                         {DecodeIsClaimedResult},
	"is_plugin_installed":                {DecodeIsPluginInstalledResult},
	"is_stable":                          {DecodeIsStable_DedustResult},
	"jetton_wallet_lock_data":            {DecodeJettonWalletLockDataResult},
	"list_nominators":                    {DecodeListNominatorsResult},
	"list_votes":                         {DecodeListVotesResult},
	"royalty_params":                     {DecodeRoyaltyParamsResult},
	"seqno":                              {DecodeSeqnoResult},
}

var KnownSimpleGetMethods = map[int][]func(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error){
	65971:  {GetReserves},
	66763:  {GetFullDomain},
	69018:  {GetVaultWhitelistedAddresses},
	69506:  {GetTelemintTokenName},
	69628:  {GetChannelData},
	71463:  {GetTorrentHash},
	72748:  {GetSaleData},
	73490:  {GetLockerData},
	75065:  {GetExecutorBalances},
	75709:  {GetExecutorVaultsWhitelist},
	77915:  {GetCronInfo},
	78683:  {GetNextAdminAddress},
	78748:  {GetPublicKey},
	79661:  {GetRouterVersion},
	80035:  {GetLpData},
	80697:  {GetAuctionInfo},
	80822:  {GetLastCleanTime},
	81467:  {GetSubwalletId},
	81490:  {GetNextProofInfo},
	81689:  {GetPoolData},
	83226:  {GetExecutorCollectionAddress},
	83263:  {GetNftApiInfo},
	83894:  {GetLpMinterAddress},
	84232:  {GetTargetBalances},
	84760:  {GetAuthorityAddress},
	85143:  {Seqno},
	85719:  {RoyaltyParams},
	86353:  {GetAmmState},
	86593:  {GetStorageContractData},
	86862:  {GetReferralCollectionAddress},
	87635:  {GetAmmStatus},
	87675:  {GetSpotPrice},
	87878:  {GetBalances},
	88817:  {GetOracleData},
	89295:  {GetMembersRaw},
	89352:  {GetAsset},
	90228:  {GetEditor},
	91481:  {GetLastFillUpTime},
	92229:  {GetPoolFullData},
	92260:  {GetSubscriptionData},
	96219:  {GetMiningData},
	96263:  {GetExchangeSettings},
	96705:  {GetBillAmount},
	96780:  {GetTradeFee},
	97026:  {GetWalletData},
	97667:  {GetRevokedTime},
	98607:  {GetVaultContractData},
	100881: {GetStatus},
	101616: {GetPowParams},
	101877: {GetVaultType},
	102351: {GetNftData},
	102491: {GetCollectionData},
	103232: {GetValidatorControllerData},
	103723: {IsStable},
	104122: {GetLpMiningData},
	104346: {GetStorageParams},
	105070: {GetTimeout},
	105875: {GetAmmContractData},
	106029: {GetJettonData},
	107305: {GetLockupData},
	107307: {GetMultisigData},
	107494: {GetVammType},
	107653: {GetPluginList},
	108868: {GetTerminalAmmPrice},
	110403: {GetPaymentInfo},
	111161: {ListNominators},
	115150: {GetParams},
	116242: {GetLpSwapData},
	117729: {GetExtensions},
	118188: {GetAssets},
	118274: {GetLockerBillData},
	119378: {GetDomain},
	119995: {GetPositionManagerContractData},
	120146: {GetPoolStatus},
	122058: {IsActive},
	122166: {GetLpAccountData},
	122284: {IsClaimed},
	122483: {GetFixPriceDataV4},
	122496: {GetAmmName},
	122498: {GetTelemintAuctionState},
	123832: {GetOrderData},
	123928: {GetStakingStatus},
	124861: {GetReferralVaultsWhitelist},
	127184: {GetVaultData},
	128085: {GetRouterData},
	128979: {JettonWalletLockData},
	129292: {GetSubscriptionInfo},
	129619: {GetTelemintAuctionConfig},
	129770: {GetReferralData},
	130271: {GetWalletParams},
	130309: {ListVotes},
}

var resultTypes = []interface{}{
	&Dnsresolve_RecordsResult{},
	&EstimateSwapOut_DedustResult{},
	&GetAmmContractData_StormResult{},
	&GetAmmName_StormResult{},
	&GetAmmState_StormResult{},
	&GetAmmStatus_StormResult{},
	&GetAsset_DedustResult{},
	&GetAssets_DedustResult{},
	&GetAuctionInfoResult{},
	&GetAuthorityAddressResult{},
	&GetBalancesResult{},
	&GetBalances_DedustResult{},
	&GetBillAddressResult{},
	&GetBillAmountResult{},
	&GetChannelDataResult{},
	&GetCollectionDataResult{},
	&GetCronInfoResult{},
	&GetDomainResult{},
	&GetEditorResult{},
	&GetExchangeSettings_StormResult{},
	&GetExecutorBalances_StormResult{},
	&GetExecutorCollectionAddress_StormResult{},
	&GetExecutorVaultsWhitelist_StormResult{},
	&GetExpectedOutputs_StonfiResult{},
	&GetExtensionsResult{},
	&GetFixPriceDataV4Result{},
	&GetFullDomainResult{},
	&GetJettonDataResult{},
	&GetLastCleanTimeResult{},
	&GetLastFillUpTimeResult{},
	&GetLiquidityDepositAddress_DedustResult{},
	&GetLockerBillDataResult{},
	&GetLockerDataResult{},
	&GetLockupDataResult{},
	&GetLpAccountAddress_StonfiResult{},
	&GetLpAccountData_StonfiResult{},
	&GetLpData_MegatonResult{},
	&GetLpMiningData_MegatonResult{},
	&GetLpMinterAddress_StormResult{},
	&GetLpSwapData_MegatonResult{},
	&GetMember_WhalesNominatorResult{},
	&GetMembersRaw_WhalesNominatorResult{},
	&GetMiningData_MegatonResult{},
	&GetMultisigDataResult{},
	&GetNextAdminAddressResult{},
	&GetNextProofInfoResult{},
	&GetNftAddressByIndexResult{},
	&GetNftApiInfoResult{},
	&GetNftContentResult{},
	&GetNftDataResult{},
	&GetNominatorDataResult{},
	&GetOracleData_StormResult{},
	&GetOrderDataResult{},
	&GetParams_WhalesNominatorResult{},
	&GetPaymentInfo_SubscriptionV2Result{},
	&GetPluginListResult{},
	&GetPoolAddress_StonfiResult{},
	&GetPoolData_DaolamaResult{},
	&GetPoolData_StonfiResult{},
	&GetPoolData_StonfiV2Result{},
	&GetPoolData_TfResult{},
	&GetPoolFullDataResult{},
	&GetPoolStatusResult{},
	&GetPositionManagerContractData_StormResult{},
	&GetPowParamsResult{},
	&GetPublicKeyResult{},
	&GetReferralCollectionAddress_StormResult{},
	&GetReferralData_StormResult{},
	&GetReferralVaultsWhitelist_StormResult{},
	&GetReserves_DedustResult{},
	&GetRevokedTimeResult{},
	&GetRouterData_StonfiResult{},
	&GetRouterData_StonfiV2Result{},
	&GetRouterVersion_StonfiV2Result{},
	&GetSaleData_BasicResult{},
	&GetSaleData_GetgemsAuctionResult{},
	&GetSaleData_GetgemsResult{},
	&GetSpotPrice_StormResult{},
	&GetStakingStatusResult{},
	&GetStatusResult{},
	&GetStorageContractAddressResult{},
	&GetStorageContractDataResult{},
	&GetStorageParamsResult{},
	&GetSubscriptionDataResult{},
	&GetSubscriptionInfo_V2Result{},
	&GetSubwalletIdResult{},
	&GetTargetBalances_DedustResult{},
	&GetTelemintAuctionConfigResult{},
	&GetTelemintAuctionStateResult{},
	&GetTelemintTokenNameResult{},
	&GetTerminalAmmPrice_StormResult{},
	&GetTimeoutResult{},
	&GetTorrentHashResult{},
	&GetTradeFee_DedustResult{},
	&GetValidatorControllerDataResult{},
	&GetVammType_StormResult{},
	&GetVaultAddress_DedustResult{},
	&GetVaultContractData_StormResult{},
	&GetVaultData_StonfiV2Result{},
	&GetVaultData_StormResult{},
	&GetVaultType_StormResult{},
	&GetVaultWhitelistedAddresses_StormResult{},
	&GetWalletAddressResult{},
	&GetWalletDataResult{},
	&GetWalletParamsResult{},
	&IsActiveResult{},
	&IsClaimedResult{},
	&IsPluginInstalledResult{},
	&IsStable_DedustResult{},
	&JettonWalletLockDataResult{},
	&ListNominatorsResult{},
	&ListVotesResult{},
	&RoyaltyParamsResult{},
	&SeqnoResult{},
}

type Executor interface {
	RunSmcMethodByID(ctx context.Context, accountID ton.AccountID, methodID int, params tlb.VmStack) (uint32, tlb.VmStack, error)
}
type Dnsresolve_RecordsResult struct {
	ResolvedBits int64
	Result       tlb.DNSRecordSet
}

func Dnsresolve(ctx context.Context, executor Executor, reqAccountID ton.AccountID, domain []byte, category tlb.Int257) (string, any, error) {
	stack := tlb.VmStack{}
	var (
		val tlb.VmStackValue
		err error
	)
	val, err = tlb.TlbStructToVmCellSlice(domain)
	if err != nil {
		return "", nil, err
	}
	stack.Put(val)
	val = tlb.VmStackValue{SumType: "VmStkInt", VmStkInt: category}
	stack.Put(val)

	// MethodID = 123660 for "dnsresolve" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 123660, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeDnsresolve_RecordsResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeDnsresolve_RecordsResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 2 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkCell") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result Dnsresolve_RecordsResult
	err = stack.Unmarshal(&result)
	return "Dnsresolve_RecordsResult", result, err
}

type EstimateSwapOut_DedustResult struct {
	AssetOut  DedustAsset
	AmountOut tlb.Int257
	TradeFee  tlb.Int257
}

func EstimateSwapOut(ctx context.Context, executor Executor, reqAccountID ton.AccountID, assetIn DedustAsset, amountIn tlb.Int257) (string, any, error) {
	stack := tlb.VmStack{}
	var (
		val tlb.VmStackValue
		err error
	)
	val, err = tlb.TlbStructToVmCellSlice(assetIn)
	if err != nil {
		return "", nil, err
	}
	stack.Put(val)
	val = tlb.VmStackValue{SumType: "VmStkInt", VmStkInt: amountIn}
	stack.Put(val)

	// MethodID = 70754 for "estimate_swap_out" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 70754, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeEstimateSwapOut_DedustResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeEstimateSwapOut_DedustResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 3 || (stack[0].SumType != "VmStkSlice") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result EstimateSwapOut_DedustResult
	err = stack.Unmarshal(&result)
	return "EstimateSwapOut_DedustResult", result, err
}

type GetAmmContractData_StormResult struct {
	AmmContractData boc.Cell
}

func GetAmmContractData(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 105875 for "get_amm_contract_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 105875, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetAmmContractData_StormResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetAmmContractData_StormResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkCell") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetAmmContractData_StormResult
	err = stack.Unmarshal(&result)
	return "GetAmmContractData_StormResult", result, err
}

type GetAmmName_StormResult struct {
	VaultAddr tlb.MsgAddress
	AssetId   uint16
}

func GetAmmName(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 122496 for "get_amm_name" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 122496, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetAmmName_StormResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetAmmName_StormResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 2 || (stack[0].SumType != "VmStkSlice") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetAmmName_StormResult
	err = stack.Unmarshal(&result)
	return "GetAmmName_StormResult", result, err
}

type GetAmmState_StormResult struct {
	QuoteAssetReserve                    uint64
	BaseAssetReserve                     uint64
	QuoteAssetWeight                     uint64
	TotalLongPositionSize                uint64
	TotalShortPositionSize               uint64
	OpenInterestLong                     uint64
	OpenInterestShort                    uint64
	LatestLongCumulativePremiumFraction  int64
	LatestShortCumulativePremiumFraction int64
	NextFundingBlockTimestamp            uint32
}

func GetAmmState(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 86353 for "get_amm_state" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 86353, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetAmmState_StormResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetAmmState_StormResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 10 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") || (stack[4].SumType != "VmStkTinyInt" && stack[4].SumType != "VmStkInt") || (stack[5].SumType != "VmStkTinyInt" && stack[5].SumType != "VmStkInt") || (stack[6].SumType != "VmStkTinyInt" && stack[6].SumType != "VmStkInt") || (stack[7].SumType != "VmStkTinyInt" && stack[7].SumType != "VmStkInt") || (stack[8].SumType != "VmStkTinyInt" && stack[8].SumType != "VmStkInt") || (stack[9].SumType != "VmStkTinyInt" && stack[9].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetAmmState_StormResult
	err = stack.Unmarshal(&result)
	return "GetAmmState_StormResult", result, err
}

type GetAmmStatus_StormResult struct {
	CloseOnly             bool
	Paused                bool
	DirectIncreaseEnabled bool
}

func GetAmmStatus(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 87635 for "get_amm_status" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 87635, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetAmmStatus_StormResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetAmmStatus_StormResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 3 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetAmmStatus_StormResult
	err = stack.Unmarshal(&result)
	return "GetAmmStatus_StormResult", result, err
}

type GetAsset_DedustResult struct {
	Asset DedustAsset
}

func GetAsset(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 89352 for "get_asset" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 89352, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetAsset_DedustResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetAsset_DedustResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkSlice") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetAsset_DedustResult
	err = stack.Unmarshal(&result)
	return "GetAsset_DedustResult", result, err
}

type GetAssets_DedustResult struct {
	Asset0 DedustAsset
	Asset1 DedustAsset
}

func GetAssets(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 118188 for "get_assets" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 118188, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetAssets_DedustResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetAssets_DedustResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 2 || (stack[0].SumType != "VmStkSlice") || (stack[1].SumType != "VmStkSlice") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetAssets_DedustResult
	err = stack.Unmarshal(&result)
	return "GetAssets_DedustResult", result, err
}

type GetAuctionInfoResult struct {
	MaxBidAddress  tlb.MsgAddress
	MaxBidAmount   uint64
	AuctionEndTime uint64
}

func GetAuctionInfo(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 80697 for "get_auction_info" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 80697, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetAuctionInfoResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetAuctionInfoResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 3 || (stack[0].SumType != "VmStkSlice") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetAuctionInfoResult
	err = stack.Unmarshal(&result)
	return "GetAuctionInfoResult", result, err
}

type GetAuthorityAddressResult struct {
	Address tlb.MsgAddress
}

func GetAuthorityAddress(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 84760 for "get_authority_address" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 84760, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetAuthorityAddressResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetAuthorityAddressResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 1 || (stack[0].SumType != "VmStkSlice") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetAuthorityAddressResult
	err = stack.Unmarshal(&result)
	return "GetAuthorityAddressResult", result, err
}

type GetBalancesResult struct {
	TonBalance           int64
	TotalRestrictedValue int64
	TotalLockedValue     int64
}

type GetBalances_DedustResult struct {
	Reserve0 tlb.Int257
	Reserve1 tlb.Int257
}

func GetBalances(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 87878 for "get_balances" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 87878, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetBalances_DedustResult, DecodeGetBalancesResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetBalances_DedustResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 2 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetBalances_DedustResult
	err = stack.Unmarshal(&result)
	return "GetBalances_DedustResult", result, err
}

func DecodeGetBalancesResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 3 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetBalancesResult
	err = stack.Unmarshal(&result)
	return "GetBalancesResult", result, err
}

type GetBillAddressResult struct {
	BillAddress tlb.MsgAddress
}

func GetBillAddress(ctx context.Context, executor Executor, reqAccountID ton.AccountID, userAddress tlb.MsgAddress) (string, any, error) {
	stack := tlb.VmStack{}
	var (
		val tlb.VmStackValue
		err error
	)
	val, err = tlb.TlbStructToVmCellSlice(userAddress)
	if err != nil {
		return "", nil, err
	}
	stack.Put(val)

	// MethodID = 130076 for "get_bill_address" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 130076, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetBillAddressResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetBillAddressResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkSlice") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetBillAddressResult
	err = stack.Unmarshal(&result)
	return "GetBillAddressResult", result, err
}

type GetBillAmountResult struct {
	Amount int64
}

func GetBillAmount(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 96705 for "get_bill_amount" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 96705, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetBillAmountResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetBillAmountResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetBillAmountResult
	err = stack.Unmarshal(&result)
	return "GetBillAmountResult", result, err
}

type GetChannelDataResult struct {
	State    int8
	Balances struct {
		A int64
		B int64
	}

	Keys struct {
		A tlb.Bits256
		B tlb.Bits256
	}

	ChannelId     tlb.Uint128
	ClosureConfig struct {
		QuarantinDuration        uint32
		MisbehaviorFine          int64
		ConditionalCloseDuration uint32
	}

	CommittedSeqno struct {
		A uint32
		B uint32
	}

	Quarantine *boc.Cell
	Addresses  struct {
		ExcessFee int64
		AddrA     tlb.MsgAddress
		AddrB     tlb.MsgAddress
	}
}

func GetChannelData(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 69628 for "get_channel_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 69628, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetChannelDataResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetChannelDataResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 8 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTuple") || (stack[2].SumType != "VmStkTuple") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") || (stack[4].SumType != "VmStkTuple") || (stack[5].SumType != "VmStkTuple") || (stack[6].SumType != "VmStkSlice" && stack[6].SumType != "VmStkNull") || (stack[7].SumType != "VmStkTuple") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetChannelDataResult
	err = stack.Unmarshal(&result)
	return "GetChannelDataResult", result, err
}

type GetCollectionDataResult struct {
	NextItemIndex     tlb.Int257
	CollectionContent tlb.Any
	OwnerAddress      tlb.MsgAddress
}

func GetCollectionData(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 102491 for "get_collection_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 102491, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetCollectionDataResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetCollectionDataResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 3 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkCell") || (stack[2].SumType != "VmStkSlice") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetCollectionDataResult
	err = stack.Unmarshal(&result)
	return "GetCollectionDataResult", result, err
}

type GetCronInfoResult struct {
	ChargeDate               uint32
	CallerFee                uint64
	BalanceAfterMinusAmounts uint64
	Period                   uint32
}

func GetCronInfo(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 77915 for "get_cron_info" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 77915, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetCronInfoResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetCronInfoResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 4 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetCronInfoResult
	err = stack.Unmarshal(&result)
	return "GetCronInfoResult", result, err
}

type GetDomainResult struct {
	Domain string
}

func GetDomain(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 119378 for "get_domain" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 119378, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetDomainResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetDomainResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 1 || (stack[0].SumType != "VmStkSlice") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetDomainResult
	err = stack.Unmarshal(&result)
	return "GetDomainResult", result, err
}

type GetEditorResult struct {
	Editor tlb.MsgAddress
}

func GetEditor(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 90228 for "get_editor" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 90228, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetEditorResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetEditorResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 1 || (stack[0].SumType != "VmStkSlice") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetEditorResult
	err = stack.Unmarshal(&result)
	return "GetEditorResult", result, err
}

type GetExchangeSettings_StormResult struct {
	Fee                           uint32
	RolloverFee                   uint32
	FundingPeriod                 uint32
	InitMarginRatio               uint32
	MaintenanceMarginRatio        uint32
	LiquidationFeeRatio           uint32
	PartialLiquidationRatio       uint32
	SpreadLimit                   uint32
	MaxPriceImpact                uint32
	MaxPriceSpread                uint32
	MaxOpenNotional               uint64
	FeeToStakersPercent           uint32
	FundingMode                   uint32
	MinPartialLiquidationNotional uint64
	MinInitMarginRatio            uint32
	ExecutorFee                   int32
	ClosePositionTimeDelta        int32
	MaxUnrealizedPnl              int32
	DirectIncreaseEnabled         bool
	DirectCloseEnabled            bool
	ExecutorsWhitelist            boc.Cell
	LowFundingFnA                 int32
	LowFundingFnB                 int32
	HighFundingFnA                int32
	HighFundingFnB                int32
	InflectionPoint               int32
}

func GetExchangeSettings(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 96263 for "get_exchange_settings" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 96263, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetExchangeSettings_StormResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetExchangeSettings_StormResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 26 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") || (stack[4].SumType != "VmStkTinyInt" && stack[4].SumType != "VmStkInt") || (stack[5].SumType != "VmStkTinyInt" && stack[5].SumType != "VmStkInt") || (stack[6].SumType != "VmStkTinyInt" && stack[6].SumType != "VmStkInt") || (stack[7].SumType != "VmStkTinyInt" && stack[7].SumType != "VmStkInt") || (stack[8].SumType != "VmStkTinyInt" && stack[8].SumType != "VmStkInt") || (stack[9].SumType != "VmStkTinyInt" && stack[9].SumType != "VmStkInt") || (stack[10].SumType != "VmStkTinyInt" && stack[10].SumType != "VmStkInt") || (stack[11].SumType != "VmStkTinyInt" && stack[11].SumType != "VmStkInt") || (stack[12].SumType != "VmStkTinyInt" && stack[12].SumType != "VmStkInt") || (stack[13].SumType != "VmStkTinyInt" && stack[13].SumType != "VmStkInt") || (stack[14].SumType != "VmStkTinyInt" && stack[14].SumType != "VmStkInt") || (stack[15].SumType != "VmStkTinyInt" && stack[15].SumType != "VmStkInt") || (stack[16].SumType != "VmStkTinyInt" && stack[16].SumType != "VmStkInt") || (stack[17].SumType != "VmStkTinyInt" && stack[17].SumType != "VmStkInt") || (stack[18].SumType != "VmStkTinyInt" && stack[18].SumType != "VmStkInt") || (stack[19].SumType != "VmStkTinyInt" && stack[19].SumType != "VmStkInt") || (stack[20].SumType != "VmStkCell") || (stack[21].SumType != "VmStkTinyInt" && stack[21].SumType != "VmStkInt") || (stack[22].SumType != "VmStkTinyInt" && stack[22].SumType != "VmStkInt") || (stack[23].SumType != "VmStkTinyInt" && stack[23].SumType != "VmStkInt") || (stack[24].SumType != "VmStkTinyInt" && stack[24].SumType != "VmStkInt") || (stack[25].SumType != "VmStkTinyInt" && stack[25].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetExchangeSettings_StormResult
	err = stack.Unmarshal(&result)
	return "GetExchangeSettings_StormResult", result, err
}

type GetExecutorBalances_StormResult struct {
	BalancesDict boc.Cell
}

func GetExecutorBalances(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 75065 for "get_executor_balances" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 75065, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetExecutorBalances_StormResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetExecutorBalances_StormResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkCell") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetExecutorBalances_StormResult
	err = stack.Unmarshal(&result)
	return "GetExecutorBalances_StormResult", result, err
}

type GetExecutorCollectionAddress_StormResult struct {
	Data tlb.MsgAddress
}

func GetExecutorCollectionAddress(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 83226 for "get_executor_collection_address" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 83226, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetExecutorCollectionAddress_StormResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetExecutorCollectionAddress_StormResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkSlice") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetExecutorCollectionAddress_StormResult
	err = stack.Unmarshal(&result)
	return "GetExecutorCollectionAddress_StormResult", result, err
}

type GetExecutorVaultsWhitelist_StormResult struct {
	BalancesDict boc.Cell
}

func GetExecutorVaultsWhitelist(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 75709 for "get_executor_vaults_whitelist" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 75709, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetExecutorVaultsWhitelist_StormResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetExecutorVaultsWhitelist_StormResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkCell") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetExecutorVaultsWhitelist_StormResult
	err = stack.Unmarshal(&result)
	return "GetExecutorVaultsWhitelist_StormResult", result, err
}

type GetExpectedOutputs_StonfiResult struct {
	Out            tlb.Int257
	ProtocolFeeOut tlb.Int257
	RefFeeOut      tlb.Int257
}

func GetExpectedOutputs(ctx context.Context, executor Executor, reqAccountID ton.AccountID, amount tlb.Int257, tokenWallet tlb.MsgAddress) (string, any, error) {
	stack := tlb.VmStack{}
	var (
		val tlb.VmStackValue
		err error
	)
	val = tlb.VmStackValue{SumType: "VmStkInt", VmStkInt: amount}
	stack.Put(val)
	val, err = tlb.TlbStructToVmCellSlice(tokenWallet)
	if err != nil {
		return "", nil, err
	}
	stack.Put(val)

	// MethodID = 115709 for "get_expected_outputs" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 115709, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetExpectedOutputs_StonfiResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetExpectedOutputs_StonfiResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 3 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetExpectedOutputs_StonfiResult
	err = stack.Unmarshal(&result)
	return "GetExpectedOutputs_StonfiResult", result, err
}

type GetExtensionsResult struct {
	Extensions *WalletV5ExtensionsList
}

func GetExtensions(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 117729 for "get_extensions" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 117729, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetExtensionsResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetExtensionsResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkCell" && stack[0].SumType != "VmStkNull") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetExtensionsResult
	err = stack.Unmarshal(&result)
	return "GetExtensionsResult", result, err
}

type GetFixPriceDataV4Result struct {
	IsComplete         bool
	CreatedAt          uint32
	MarketplaceAddress tlb.MsgAddress
	NftAddress         tlb.MsgAddress
	NftOwnerAddress    *tlb.MsgAddress
	FullPrice          tlb.Int257
	FeeAddress         tlb.MsgAddress
	FeePercent         uint32
	RoyaltyAddress     tlb.MsgAddress
	RoyaltyPercent     uint32
	SoldAt             uint32
	SoldQueryId        uint64
	JettonPriceDict    *boc.Cell
}

func GetFixPriceDataV4(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 122483 for "get_fix_price_data_v4" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 122483, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetFixPriceDataV4Result} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetFixPriceDataV4Result(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 13 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkSlice") || (stack[3].SumType != "VmStkSlice") || (stack[4].SumType != "VmStkSlice" && stack[4].SumType != "VmStkNull") || (stack[5].SumType != "VmStkTinyInt" && stack[5].SumType != "VmStkInt") || (stack[6].SumType != "VmStkSlice") || (stack[7].SumType != "VmStkTinyInt" && stack[7].SumType != "VmStkInt") || (stack[8].SumType != "VmStkSlice") || (stack[9].SumType != "VmStkTinyInt" && stack[9].SumType != "VmStkInt") || (stack[10].SumType != "VmStkTinyInt" && stack[10].SumType != "VmStkInt") || (stack[11].SumType != "VmStkTinyInt" && stack[11].SumType != "VmStkInt") || (stack[12].SumType != "VmStkCell" && stack[12].SumType != "VmStkNull") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetFixPriceDataV4Result
	err = stack.Unmarshal(&result)
	return "GetFixPriceDataV4Result", result, err
}

type GetFullDomainResult struct {
	Domain string
}

func GetFullDomain(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 66763 for "get_full_domain" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 66763, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetFullDomainResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetFullDomainResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 1 || (stack[0].SumType != "VmStkSlice") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetFullDomainResult
	err = stack.Unmarshal(&result)
	return "GetFullDomainResult", result, err
}

type GetJettonDataResult struct {
	TotalSupply      tlb.Int257
	Mintable         bool
	AdminAddress     tlb.MsgAddress
	JettonContent    tlb.Any
	JettonWalletCode tlb.Any
}

func GetJettonData(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 106029 for "get_jetton_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 106029, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetJettonDataResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetJettonDataResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 5 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkSlice") || (stack[3].SumType != "VmStkCell") || (stack[4].SumType != "VmStkCell") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetJettonDataResult
	err = stack.Unmarshal(&result)
	return "GetJettonDataResult", result, err
}

type GetLastCleanTimeResult struct {
	Timestamp uint64
}

func GetLastCleanTime(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 80822 for "get_last_clean_time" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 80822, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetLastCleanTimeResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetLastCleanTimeResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetLastCleanTimeResult
	err = stack.Unmarshal(&result)
	return "GetLastCleanTimeResult", result, err
}

type GetLastFillUpTimeResult struct {
	LastFillUpTime int64
}

func GetLastFillUpTime(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 91481 for "get_last_fill_up_time" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 91481, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetLastFillUpTimeResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetLastFillUpTimeResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetLastFillUpTimeResult
	err = stack.Unmarshal(&result)
	return "GetLastFillUpTimeResult", result, err
}

type GetLiquidityDepositAddress_DedustResult struct {
	LiquidityDepositAddr tlb.MsgAddress
}

func GetLiquidityDepositAddress(ctx context.Context, executor Executor, reqAccountID ton.AccountID, ownerAddr tlb.MsgAddress, poolType tlb.Int257, asset0 DedustAsset, asset1 DedustAsset) (string, any, error) {
	stack := tlb.VmStack{}
	var (
		val tlb.VmStackValue
		err error
	)
	val, err = tlb.TlbStructToVmCellSlice(ownerAddr)
	if err != nil {
		return "", nil, err
	}
	stack.Put(val)
	val = tlb.VmStackValue{SumType: "VmStkInt", VmStkInt: poolType}
	stack.Put(val)
	val, err = tlb.TlbStructToVmCellSlice(asset0)
	if err != nil {
		return "", nil, err
	}
	stack.Put(val)
	val, err = tlb.TlbStructToVmCellSlice(asset1)
	if err != nil {
		return "", nil, err
	}
	stack.Put(val)

	// MethodID = 84481 for "get_liquidity_deposit_address" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 84481, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetLiquidityDepositAddress_DedustResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetLiquidityDepositAddress_DedustResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkSlice") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetLiquidityDepositAddress_DedustResult
	err = stack.Unmarshal(&result)
	return "GetLiquidityDepositAddress_DedustResult", result, err
}

type GetLockerBillDataResult struct {
	LockerAddress     tlb.MsgAddress
	TotalCoinsDeposit uint64
	UserAddress       tlb.MsgAddress
	LastWithdrawTime  uint32
}

func GetLockerBillData(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 118274 for "get_locker_bill_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 118274, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetLockerBillDataResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetLockerBillDataResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 4 || (stack[0].SumType != "VmStkSlice") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkSlice") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetLockerBillDataResult
	err = stack.Unmarshal(&result)
	return "GetLockerBillDataResult", result, err
}

type GetLockerDataResult struct {
	TotalCoinsLocked     uint64
	TotalReward          uint64
	DepositsEndTime      uint32
	VestingStartTime     uint32
	VestingTotalDuration uint32
	UnlockPeriod         uint32
}

func GetLockerData(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 73490 for "get_locker_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 73490, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetLockerDataResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetLockerDataResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 6 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") || (stack[4].SumType != "VmStkTinyInt" && stack[4].SumType != "VmStkInt") || (stack[5].SumType != "VmStkTinyInt" && stack[5].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetLockerDataResult
	err = stack.Unmarshal(&result)
	return "GetLockerDataResult", result, err
}

type GetLockupDataResult struct {
	StartTime     int64
	TotalDuration int64
	UnlockPeriod  int64
	CliffDiration int64
	TotalAmount   int64
	AllowElector  int64
}

func GetLockupData(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 107305 for "get_lockup_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 107305, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetLockupDataResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetLockupDataResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 6 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") || (stack[4].SumType != "VmStkTinyInt" && stack[4].SumType != "VmStkInt") || (stack[5].SumType != "VmStkTinyInt" && stack[5].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetLockupDataResult
	err = stack.Unmarshal(&result)
	return "GetLockupDataResult", result, err
}

type GetLpAccountAddress_StonfiResult struct {
	LpAccountAddress tlb.MsgAddress
}

func GetLpAccountAddress(ctx context.Context, executor Executor, reqAccountID ton.AccountID, ownerAddress tlb.MsgAddress) (string, any, error) {
	stack := tlb.VmStack{}
	var (
		val tlb.VmStackValue
		err error
	)
	val, err = tlb.TlbStructToVmCellSlice(ownerAddress)
	if err != nil {
		return "", nil, err
	}
	stack.Put(val)

	// MethodID = 87316 for "get_lp_account_address" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 87316, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetLpAccountAddress_StonfiResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetLpAccountAddress_StonfiResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkSlice") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetLpAccountAddress_StonfiResult
	err = stack.Unmarshal(&result)
	return "GetLpAccountAddress_StonfiResult", result, err
}

type GetLpAccountData_StonfiResult struct {
	UserAddress tlb.MsgAddress
	PoolAddress tlb.MsgAddress
	Amount0     tlb.Int257
	Amount1     tlb.Int257
}

func GetLpAccountData(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 122166 for "get_lp_account_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 122166, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetLpAccountData_StonfiResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetLpAccountData_StonfiResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 4 || (stack[0].SumType != "VmStkSlice") || (stack[1].SumType != "VmStkSlice") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetLpAccountData_StonfiResult
	err = stack.Unmarshal(&result)
	return "GetLpAccountData_StonfiResult", result, err
}

type GetLpData_MegatonResult struct {
	PoolCount      uint64
	JettonPairToLp tlb.Any
	LpToJettonPair tlb.Any
}

func GetLpData(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 80035 for "get_lp_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 80035, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetLpData_MegatonResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetLpData_MegatonResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 3 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkCell") || (stack[2].SumType != "VmStkCell") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetLpData_MegatonResult
	err = stack.Unmarshal(&result)
	return "GetLpData_MegatonResult", result, err
}

type GetLpMiningData_MegatonResult struct {
	MiningAmount   uint64
	DatetimeAmount uint64
	MinableTime    uint64
	HalfLife       uint64
	LastIndex      uint64
	LastMined      uint64
	MiningRateCell tlb.Any
}

func GetLpMiningData(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 104122 for "get_lp_mining_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 104122, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetLpMiningData_MegatonResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetLpMiningData_MegatonResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 7 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") || (stack[4].SumType != "VmStkTinyInt" && stack[4].SumType != "VmStkInt") || (stack[5].SumType != "VmStkTinyInt" && stack[5].SumType != "VmStkInt") || (stack[6].SumType != "VmStkCell") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetLpMiningData_MegatonResult
	err = stack.Unmarshal(&result)
	return "GetLpMiningData_MegatonResult", result, err
}

type GetLpMinterAddress_StormResult struct {
	Data tlb.MsgAddress
}

func GetLpMinterAddress(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 83894 for "get_lp_minter_address" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 83894, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetLpMinterAddress_StormResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetLpMinterAddress_StormResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkSlice") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetLpMinterAddress_StormResult
	err = stack.Unmarshal(&result)
	return "GetLpMinterAddress_StormResult", result, err
}

type GetLpSwapData_MegatonResult struct {
	SwapFee               uint64
	MinAmount             uint64
	RouterAddress         tlb.MsgAddress
	JettonAAddress        tlb.MsgAddress
	JettonAWalletAddress  tlb.MsgAddress
	JettonABalance        tlb.Int257
	JettonAPendingBalance tlb.Int257
	JettonBAddress        tlb.MsgAddress
	JettonBWalletAddress  tlb.MsgAddress
	JettonBBalance        tlb.Int257
	JettonBPendingBalance tlb.Int257
}

func GetLpSwapData(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 116242 for "get_lp_swap_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 116242, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetLpSwapData_MegatonResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetLpSwapData_MegatonResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 11 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkSlice") || (stack[3].SumType != "VmStkSlice") || (stack[4].SumType != "VmStkSlice") || (stack[5].SumType != "VmStkTinyInt" && stack[5].SumType != "VmStkInt") || (stack[6].SumType != "VmStkTinyInt" && stack[6].SumType != "VmStkInt") || (stack[7].SumType != "VmStkSlice") || (stack[8].SumType != "VmStkSlice") || (stack[9].SumType != "VmStkTinyInt" && stack[9].SumType != "VmStkInt") || (stack[10].SumType != "VmStkTinyInt" && stack[10].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetLpSwapData_MegatonResult
	err = stack.Unmarshal(&result)
	return "GetLpSwapData_MegatonResult", result, err
}

type GetMember_WhalesNominatorResult struct {
	MemberBalance         int64
	MemberPendingDeposit  int64
	MemberPendingWithdraw int64
	MemberWithdraw        int64
}

func GetMember(ctx context.Context, executor Executor, reqAccountID ton.AccountID, member tlb.MsgAddress) (string, any, error) {
	stack := tlb.VmStack{}
	var (
		val tlb.VmStackValue
		err error
	)
	val, err = tlb.TlbStructToVmCellSlice(member)
	if err != nil {
		return "", nil, err
	}
	stack.Put(val)

	// MethodID = 70558 for "get_member" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 70558, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetMember_WhalesNominatorResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetMember_WhalesNominatorResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 4 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetMember_WhalesNominatorResult
	err = stack.Unmarshal(&result)
	return "GetMember_WhalesNominatorResult", result, err
}

type GetMembersRaw_WhalesNominatorResult struct {
	Members WhalesNominatorsMembersList
}

func GetMembersRaw(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 89295 for "get_members_raw" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 89295, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetMembersRaw_WhalesNominatorResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetMembersRaw_WhalesNominatorResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkCell") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetMembersRaw_WhalesNominatorResult
	err = stack.Unmarshal(&result)
	return "GetMembersRaw_WhalesNominatorResult", result, err
}

type GetMiningData_MegatonResult struct {
	TotalMiningAmount  uint64
	TotalMiningRate    uint64
	MiningAmountPerSec uint64
	HalfLife           uint64
	TotalReward        uint64
	Unknown            uint64
}

func GetMiningData(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 96219 for "get_mining_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 96219, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetMiningData_MegatonResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetMiningData_MegatonResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 6 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") || (stack[4].SumType != "VmStkTinyInt" && stack[4].SumType != "VmStkInt") || (stack[5].SumType != "VmStkTinyInt" && stack[5].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetMiningData_MegatonResult
	err = stack.Unmarshal(&result)
	return "GetMiningData_MegatonResult", result, err
}

type GetMultisigDataResult struct {
	Seqno     tlb.Int257
	Threshold uint8
	Signers   MultisigSignersList
	Proposers *MultisigProposersList
}

func GetMultisigData(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 107307 for "get_multisig_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 107307, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetMultisigDataResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetMultisigDataResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 4 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkCell") || (stack[3].SumType != "VmStkCell" && stack[3].SumType != "VmStkNull") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetMultisigDataResult
	err = stack.Unmarshal(&result)
	return "GetMultisigDataResult", result, err
}

type GetNextAdminAddressResult struct {
	NextAdminAddress tlb.MsgAddress
}

func GetNextAdminAddress(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 78683 for "get_next_admin_address" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 78683, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetNextAdminAddressResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetNextAdminAddressResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkSlice") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetNextAdminAddressResult
	err = stack.Unmarshal(&result)
	return "GetNextAdminAddressResult", result, err
}

type GetNextProofInfoResult struct {
	NextProof     uint64
	LastProofTime uint32
	MaxSpan       uint32
}

func GetNextProofInfo(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 81490 for "get_next_proof_info" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 81490, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetNextProofInfoResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetNextProofInfoResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 3 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetNextProofInfoResult
	err = stack.Unmarshal(&result)
	return "GetNextProofInfoResult", result, err
}

type GetNftAddressByIndexResult struct {
	Address tlb.MsgAddress
}

func GetNftAddressByIndex(ctx context.Context, executor Executor, reqAccountID ton.AccountID, index tlb.Int257) (string, any, error) {
	stack := tlb.VmStack{}
	var (
		val tlb.VmStackValue
		err error
	)
	val = tlb.VmStackValue{SumType: "VmStkInt", VmStkInt: index}
	stack.Put(val)

	// MethodID = 92067 for "get_nft_address_by_index" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 92067, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetNftAddressByIndexResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetNftAddressByIndexResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 1 || (stack[0].SumType != "VmStkSlice") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetNftAddressByIndexResult
	err = stack.Unmarshal(&result)
	return "GetNftAddressByIndexResult", result, err
}

type GetNftApiInfoResult struct {
	Version uint32
	Uri     tlb.Text
}

func GetNftApiInfo(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 83263 for "get_nft_api_info" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 83263, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetNftApiInfoResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetNftApiInfoResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 2 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkCell") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetNftApiInfoResult
	err = stack.Unmarshal(&result)
	return "GetNftApiInfoResult", result, err
}

type GetNftContentResult struct {
	Content tlb.FullContent
}

func GetNftContent(ctx context.Context, executor Executor, reqAccountID ton.AccountID, index tlb.Int257, individualContent tlb.Any) (string, any, error) {
	stack := tlb.VmStack{}
	var (
		val tlb.VmStackValue
		err error
	)
	val = tlb.VmStackValue{SumType: "VmStkInt", VmStkInt: index}
	stack.Put(val)
	val, err = tlb.TlbStructToVmCell(individualContent)
	if err != nil {
		return "", nil, err
	}
	stack.Put(val)

	// MethodID = 68445 for "get_nft_content" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 68445, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetNftContentResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetNftContentResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 1 || (stack[0].SumType != "VmStkCell") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetNftContentResult
	err = stack.Unmarshal(&result)
	return "GetNftContentResult", result, err
}

type GetNftDataResult struct {
	Init              bool
	Index             tlb.Int257
	CollectionAddress tlb.MsgAddress
	OwnerAddress      tlb.MsgAddress
	IndividualContent tlb.Any
}

func GetNftData(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 102351 for "get_nft_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 102351, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetNftDataResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetNftDataResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 5 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkSlice") || (stack[3].SumType != "VmStkSlice") || (stack[4].SumType != "VmStkCell") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetNftDataResult
	err = stack.Unmarshal(&result)
	return "GetNftDataResult", result, err
}

type GetNominatorDataResult struct {
	Amount               uint64
	PendingDepositAmount uint64
	WithdrawFound        bool
}

func GetNominatorData(ctx context.Context, executor Executor, reqAccountID ton.AccountID, address tlb.Int257) (string, any, error) {
	stack := tlb.VmStack{}
	var (
		val tlb.VmStackValue
		err error
	)
	val = tlb.VmStackValue{SumType: "VmStkInt", VmStkInt: address}
	stack.Put(val)

	// MethodID = 112473 for "get_nominator_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 112473, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetNominatorDataResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetNominatorDataResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 3 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetNominatorDataResult
	err = stack.Unmarshal(&result)
	return "GetNominatorDataResult", result, err
}

type GetOracleData_StormResult struct {
	OracleLastPrice       uint64
	OracleLastSpread      uint64
	OracleLastTimestamp   uint32
	OracleMaxDeviation    uint64
	OracleValidityPeriod  uint32
	OraclePublicKeysCount uint8
	OraclePublicKeysRef   boc.Cell
}

func GetOracleData(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 88817 for "get_oracle_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 88817, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetOracleData_StormResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetOracleData_StormResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 7 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") || (stack[4].SumType != "VmStkTinyInt" && stack[4].SumType != "VmStkInt") || (stack[5].SumType != "VmStkTinyInt" && stack[5].SumType != "VmStkInt") || (stack[6].SumType != "VmStkCell") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetOracleData_StormResult
	err = stack.Unmarshal(&result)
	return "GetOracleData_StormResult", result, err
}

type GetOrderDataResult struct {
	MultisigAddress  tlb.MsgAddress
	OrderSeqno       tlb.Int256
	Threshold        uint8
	SentForExecution bool
	Signers          tlb.Hashmap[tlb.Uint8, tlb.MsgAddress]
	ApprovalsMask    tlb.Int256
	ApprovalsNum     uint8
	ExpirationDate   uint64
	Order            MultisigOrder
}

func GetOrderData(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 123832 for "get_order_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 123832, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetOrderDataResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetOrderDataResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 9 || (stack[0].SumType != "VmStkSlice") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") || (stack[4].SumType != "VmStkCell") || (stack[5].SumType != "VmStkTinyInt" && stack[5].SumType != "VmStkInt") || (stack[6].SumType != "VmStkTinyInt" && stack[6].SumType != "VmStkInt") || (stack[7].SumType != "VmStkTinyInt" && stack[7].SumType != "VmStkInt") || (stack[8].SumType != "VmStkCell") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetOrderDataResult
	err = stack.Unmarshal(&result)
	return "GetOrderDataResult", result, err
}

type GetParams_WhalesNominatorResult struct {
	Enabled        bool
	UpdatesEnables bool
	MinStake       int64
	DepositFee     int64
	WithdrawFee    int64
	PoolFee        int64
	ReceiptPrice   int64
}

func GetParams(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 115150 for "get_params" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 115150, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetParams_WhalesNominatorResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetParams_WhalesNominatorResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 7 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") || (stack[4].SumType != "VmStkTinyInt" && stack[4].SumType != "VmStkInt") || (stack[5].SumType != "VmStkTinyInt" && stack[5].SumType != "VmStkInt") || (stack[6].SumType != "VmStkTinyInt" && stack[6].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetParams_WhalesNominatorResult
	err = stack.Unmarshal(&result)
	return "GetParams_WhalesNominatorResult", result, err
}

type GetPaymentInfo_SubscriptionV2Result struct {
	Active           bool
	PaymentPerPeriod tlb.Grams
	Period           uint32
	ChargeDate       uint32
	GracePeriod      uint32
	LastRequestTime  uint32
	CallerFee        tlb.Grams
}

func GetPaymentInfo(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 110403 for "get_payment_info" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 110403, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetPaymentInfo_SubscriptionV2Result} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetPaymentInfo_SubscriptionV2Result(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 7 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") || (stack[4].SumType != "VmStkTinyInt" && stack[4].SumType != "VmStkInt") || (stack[5].SumType != "VmStkTinyInt" && stack[5].SumType != "VmStkInt") || (stack[6].SumType != "VmStkTinyInt" && stack[6].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetPaymentInfo_SubscriptionV2Result
	err = stack.Unmarshal(&result)
	return "GetPaymentInfo_SubscriptionV2Result", result, err
}

type GetPluginListResult struct {
	Plugins []struct {
		Workchain int32
		Address   tlb.Bits256
	}
}

func GetPluginList(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 107653 for "get_plugin_list" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 107653, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetPluginListResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetPluginListResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 1 || (stack[0].SumType != "VmStkTuple" && stack[0].SumType != "VmStkNull") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetPluginListResult
	err = stack.Unmarshal(&result)
	return "GetPluginListResult", result, err
}

type GetPoolAddress_StonfiResult struct {
	PoolAddress tlb.MsgAddress
}

func GetPoolAddress(ctx context.Context, executor Executor, reqAccountID ton.AccountID, token0 tlb.MsgAddress, token1 tlb.MsgAddress) (string, any, error) {
	stack := tlb.VmStack{}
	var (
		val tlb.VmStackValue
		err error
	)
	val, err = tlb.TlbStructToVmCellSlice(token0)
	if err != nil {
		return "", nil, err
	}
	stack.Put(val)
	val, err = tlb.TlbStructToVmCellSlice(token1)
	if err != nil {
		return "", nil, err
	}
	stack.Put(val)

	// MethodID = 101789 for "get_pool_address" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 101789, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetPoolAddress_StonfiResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetPoolAddress_StonfiResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkSlice") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetPoolAddress_StonfiResult
	err = stack.Unmarshal(&result)
	return "GetPoolAddress_StonfiResult", result, err
}

type GetPoolData_DaolamaResult struct {
	Halted         bool
	Balance        uint64
	Borrowed       uint64
	LpTokenBalance uint64
	FeeCollected   uint64
}

type GetPoolData_StonfiResult struct {
	Reserve0                   tlb.Int257
	Reserve1                   tlb.Int257
	Token0Address              tlb.MsgAddress
	Token1Address              tlb.MsgAddress
	LpFee                      uint8
	ProtocolFee                uint8
	RefFee                     uint8
	ProtocolFeeAddress         tlb.MsgAddress
	CollectedToken0ProtocolFee tlb.Int257
	CollectedToken1ProtocolFee tlb.Int257
}

type GetPoolData_StonfiV2Result struct {
	IsLocked                   bool
	RouterAddress              tlb.MsgAddress
	TotalSupply                tlb.Int257
	Reserve0                   tlb.Int257
	Reserve1                   tlb.Int257
	Token0WalletAddress        tlb.MsgAddress
	Token1WalletAddress        tlb.MsgAddress
	LpFee                      uint16
	ProtocolFee                uint16
	ProtocolFeeAddress         tlb.MsgAddress
	CollectedToken0ProtocolFee tlb.Int257
	CollectedToken1ProtocolFee tlb.Int257
}

type GetPoolData_TfResult struct {
	State                    int8
	NominatorsCount          uint32
	StakeAmountSent          int64
	ValidatorAmount          int64
	ValidatorAddress         tlb.Bits256
	ValidatorRewardShare     uint32
	MaxNominatorsCount       uint32
	MinValidatorStake        int64
	MinNominatorStake        int64
	Nominators               *tlb.Any
	WithdrawRequests         *AccountLists
	StakeAt                  uint32
	SavedValidatorSetHash    tlb.Bits256
	ValidatorSetChangesCount uint32
	ValidatorSetChangeTime   uint32
	StakeHeldFor             uint32
	ConfigProposalVotings    []struct {
	}
}

func GetPoolData(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 81689 for "get_pool_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 81689, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetPoolData_DaolamaResult, DecodeGetPoolData_StonfiResult, DecodeGetPoolData_StonfiV2Result, DecodeGetPoolData_TfResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetPoolData_DaolamaResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 5 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") || (stack[4].SumType != "VmStkTinyInt" && stack[4].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetPoolData_DaolamaResult
	err = stack.Unmarshal(&result)
	return "GetPoolData_DaolamaResult", result, err
}

func DecodeGetPoolData_StonfiResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 10 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkSlice") || (stack[3].SumType != "VmStkSlice") || (stack[4].SumType != "VmStkTinyInt" && stack[4].SumType != "VmStkInt") || (stack[5].SumType != "VmStkTinyInt" && stack[5].SumType != "VmStkInt") || (stack[6].SumType != "VmStkTinyInt" && stack[6].SumType != "VmStkInt") || (stack[7].SumType != "VmStkSlice") || (stack[8].SumType != "VmStkTinyInt" && stack[8].SumType != "VmStkInt") || (stack[9].SumType != "VmStkTinyInt" && stack[9].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetPoolData_StonfiResult
	err = stack.Unmarshal(&result)
	return "GetPoolData_StonfiResult", result, err
}

func DecodeGetPoolData_StonfiV2Result(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 12 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkSlice") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") || (stack[4].SumType != "VmStkTinyInt" && stack[4].SumType != "VmStkInt") || (stack[5].SumType != "VmStkSlice") || (stack[6].SumType != "VmStkSlice") || (stack[7].SumType != "VmStkTinyInt" && stack[7].SumType != "VmStkInt") || (stack[8].SumType != "VmStkTinyInt" && stack[8].SumType != "VmStkInt") || (stack[9].SumType != "VmStkSlice") || (stack[10].SumType != "VmStkTinyInt" && stack[10].SumType != "VmStkInt") || (stack[11].SumType != "VmStkTinyInt" && stack[11].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetPoolData_StonfiV2Result
	err = stack.Unmarshal(&result)
	return "GetPoolData_StonfiV2Result", result, err
}

func DecodeGetPoolData_TfResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 17 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") || (stack[4].SumType != "VmStkTinyInt" && stack[4].SumType != "VmStkInt") || (stack[5].SumType != "VmStkTinyInt" && stack[5].SumType != "VmStkInt") || (stack[6].SumType != "VmStkTinyInt" && stack[6].SumType != "VmStkInt") || (stack[7].SumType != "VmStkTinyInt" && stack[7].SumType != "VmStkInt") || (stack[8].SumType != "VmStkTinyInt" && stack[8].SumType != "VmStkInt") || (stack[9].SumType != "VmStkCell" && stack[9].SumType != "VmStkNull") || (stack[10].SumType != "VmStkCell" && stack[10].SumType != "VmStkNull") || (stack[11].SumType != "VmStkTinyInt" && stack[11].SumType != "VmStkInt") || (stack[12].SumType != "VmStkTinyInt" && stack[12].SumType != "VmStkInt") || (stack[13].SumType != "VmStkTinyInt" && stack[13].SumType != "VmStkInt") || (stack[14].SumType != "VmStkTinyInt" && stack[14].SumType != "VmStkInt") || (stack[15].SumType != "VmStkTinyInt" && stack[15].SumType != "VmStkInt") || (stack[16].SumType != "VmStkTuple" && stack[16].SumType != "VmStkNull") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetPoolData_TfResult
	err = stack.Unmarshal(&result)
	return "GetPoolData_TfResult", result, err
}

type GetPoolFullDataResult struct {
	State                        int32
	Halted                       bool
	TotalBalance                 int64
	InterestRate                 int32
	OptimisticDepositWithdrawals int64
	DepositsOpen                 bool
	SavedValidatorSetHash        tlb.Bits256
	PrevRoundBorrowers           struct {
		BorrowersDict   *boc.Cell
		RoundId         int32
		ActiveBorrowers int32
		Borrowed        int64
		Expected        int64
		Retured         int64
		Profit          int64
	}

	CurrentRoundBorrowers struct {
		BorrowersDict   *boc.Cell
		RoundId         int32
		ActiveBorrowers int32
		Borrowed        int64
		Expected        int64
		Retured         int64
		Profit          int64
	}

	MinLoanPerValidator    int64
	MaxLoanPerValidator    int64
	GovernanceFee          int32
	JettonMinter           tlb.MsgAddress
	Supply                 int64
	DepositPayout          *tlb.MsgAddress
	RequestedForDeposit    int64
	WithdrawalPayout       *tlb.MsgAddress
	RequestedForWithdrawal int64
	Sudoer                 *tlb.MsgAddress
	SudoerSetAt            int32
	Governor               *tlb.MsgAddress
	GovernorUpdateAfter    int64
	InterestManager        *tlb.MsgAddress
	Halter                 *tlb.MsgAddress
	Approver               *tlb.MsgAddress
	ControllerCode         boc.Cell
	PoolJettonWalletCode   boc.Cell
	PayoutMinterCode       boc.Cell
	ProjectedBalance       int64
	ProjectedSupply        int64
}

func GetPoolFullData(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 92229 for "get_pool_full_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 92229, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetPoolFullDataResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetPoolFullDataResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 30 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") || (stack[4].SumType != "VmStkTinyInt" && stack[4].SumType != "VmStkInt") || (stack[5].SumType != "VmStkTinyInt" && stack[5].SumType != "VmStkInt") || (stack[6].SumType != "VmStkTinyInt" && stack[6].SumType != "VmStkInt") || (stack[7].SumType != "VmStkTuple") || (stack[8].SumType != "VmStkTuple") || (stack[9].SumType != "VmStkTinyInt" && stack[9].SumType != "VmStkInt") || (stack[10].SumType != "VmStkTinyInt" && stack[10].SumType != "VmStkInt") || (stack[11].SumType != "VmStkTinyInt" && stack[11].SumType != "VmStkInt") || (stack[12].SumType != "VmStkSlice") || (stack[13].SumType != "VmStkTinyInt" && stack[13].SumType != "VmStkInt") || (stack[14].SumType != "VmStkSlice" && stack[14].SumType != "VmStkNull") || (stack[15].SumType != "VmStkTinyInt" && stack[15].SumType != "VmStkInt") || (stack[16].SumType != "VmStkSlice" && stack[16].SumType != "VmStkNull") || (stack[17].SumType != "VmStkTinyInt" && stack[17].SumType != "VmStkInt") || (stack[18].SumType != "VmStkSlice" && stack[18].SumType != "VmStkNull") || (stack[19].SumType != "VmStkTinyInt" && stack[19].SumType != "VmStkInt") || (stack[20].SumType != "VmStkSlice" && stack[20].SumType != "VmStkNull") || (stack[21].SumType != "VmStkTinyInt" && stack[21].SumType != "VmStkInt") || (stack[22].SumType != "VmStkSlice" && stack[22].SumType != "VmStkNull") || (stack[23].SumType != "VmStkSlice" && stack[23].SumType != "VmStkNull") || (stack[24].SumType != "VmStkSlice" && stack[24].SumType != "VmStkNull") || (stack[25].SumType != "VmStkCell") || (stack[26].SumType != "VmStkCell") || (stack[27].SumType != "VmStkCell") || (stack[28].SumType != "VmStkTinyInt" && stack[28].SumType != "VmStkInt") || (stack[29].SumType != "VmStkTinyInt" && stack[29].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetPoolFullDataResult
	err = stack.Unmarshal(&result)
	return "GetPoolFullDataResult", result, err
}

type GetPoolStatusResult struct {
	Balance                int64
	BalanceSent            int64
	BalancePendingDeposits int64
	BalancePendingWithdraw int64
	BalanceWithdraw        int64
}

func GetPoolStatus(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 120146 for "get_pool_status" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 120146, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetPoolStatusResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetPoolStatusResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 5 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") || (stack[4].SumType != "VmStkTinyInt" && stack[4].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetPoolStatusResult
	err = stack.Unmarshal(&result)
	return "GetPoolStatusResult", result, err
}

type GetPositionManagerContractData_StormResult struct {
	Info boc.Cell
}

func GetPositionManagerContractData(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 119995 for "get_position_manager_contract_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 119995, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetPositionManagerContractData_StormResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetPositionManagerContractData_StormResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkCell") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetPositionManagerContractData_StormResult
	err = stack.Unmarshal(&result)
	return "GetPositionManagerContractData_StormResult", result, err
}

type GetPowParamsResult struct {
	Seed          tlb.Uint128
	PowComplexity tlb.Int256
	Amount        uint64
	Interval      uint32
}

func GetPowParams(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 101616 for "get_pow_params" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 101616, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetPowParamsResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetPowParamsResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 4 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetPowParamsResult
	err = stack.Unmarshal(&result)
	return "GetPowParamsResult", result, err
}

type GetPublicKeyResult struct {
	PublicKey tlb.Int257
}

func GetPublicKey(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 78748 for "get_public_key" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 78748, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetPublicKeyResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetPublicKeyResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetPublicKeyResult
	err = stack.Unmarshal(&result)
	return "GetPublicKeyResult", result, err
}

type GetReferralCollectionAddress_StormResult struct {
	Data tlb.MsgAddress
}

func GetReferralCollectionAddress(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 86862 for "get_referral_collection_address" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 86862, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetReferralCollectionAddress_StormResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetReferralCollectionAddress_StormResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkSlice") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetReferralCollectionAddress_StormResult
	err = stack.Unmarshal(&result)
	return "GetReferralCollectionAddress_StormResult", result, err
}

type GetReferralData_StormResult struct {
	ReferralType int32
	Discount     uint32
	Rebate       uint32
	BalancesDict boc.Cell
}

func GetReferralData(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 129770 for "get_referral_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 129770, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetReferralData_StormResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetReferralData_StormResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 4 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkCell") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetReferralData_StormResult
	err = stack.Unmarshal(&result)
	return "GetReferralData_StormResult", result, err
}

type GetReferralVaultsWhitelist_StormResult struct {
	BalancesDict boc.Cell
}

func GetReferralVaultsWhitelist(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 124861 for "get_referral_vaults_whitelist" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 124861, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetReferralVaultsWhitelist_StormResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetReferralVaultsWhitelist_StormResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkCell") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetReferralVaultsWhitelist_StormResult
	err = stack.Unmarshal(&result)
	return "GetReferralVaultsWhitelist_StormResult", result, err
}

type GetReserves_DedustResult struct {
	Reserve0 tlb.Int257
	Reserve1 tlb.Int257
}

func GetReserves(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 65971 for "get_reserves" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 65971, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetReserves_DedustResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetReserves_DedustResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 2 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetReserves_DedustResult
	err = stack.Unmarshal(&result)
	return "GetReserves_DedustResult", result, err
}

type GetRevokedTimeResult struct {
	Time uint64
}

func GetRevokedTime(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 97667 for "get_revoked_time" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 97667, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetRevokedTimeResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetRevokedTimeResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 1 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetRevokedTimeResult
	err = stack.Unmarshal(&result)
	return "GetRevokedTimeResult", result, err
}

type GetRouterData_StonfiResult struct {
	IsLocked           bool
	AdminAddress       tlb.MsgAddress
	TempUpgrade        tlb.Any
	PoolCode           tlb.Any
	JettonLpWalletCode tlb.Any
	LpAccountCode      tlb.Any
}

type GetRouterData_StonfiV2Result struct {
	Id                 uint32
	DexType            string
	IsLocked           bool
	AdminAddress       tlb.MsgAddress
	TempUpgrade        tlb.Any
	PoolCode           tlb.Any
	JettonLpWalletCode tlb.Any
	LpAccountCode      tlb.Any
	VaultCode          tlb.Any
}

func GetRouterData(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 128085 for "get_router_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 128085, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetRouterData_StonfiResult, DecodeGetRouterData_StonfiV2Result} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetRouterData_StonfiResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 6 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkSlice") || (stack[2].SumType != "VmStkCell") || (stack[3].SumType != "VmStkCell") || (stack[4].SumType != "VmStkCell") || (stack[5].SumType != "VmStkCell") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetRouterData_StonfiResult
	err = stack.Unmarshal(&result)
	return "GetRouterData_StonfiResult", result, err
}

func DecodeGetRouterData_StonfiV2Result(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 9 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkSlice") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkSlice") || (stack[4].SumType != "VmStkCell") || (stack[5].SumType != "VmStkCell") || (stack[6].SumType != "VmStkCell") || (stack[7].SumType != "VmStkCell") || (stack[8].SumType != "VmStkCell") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetRouterData_StonfiV2Result
	err = stack.Unmarshal(&result)
	return "GetRouterData_StonfiV2Result", result, err
}

type GetRouterVersion_StonfiV2Result struct {
	Major       uint32
	Minor       uint32
	Development string
}

func GetRouterVersion(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 79661 for "get_router_version" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 79661, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetRouterVersion_StonfiV2Result} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetRouterVersion_StonfiV2Result(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 3 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkSlice") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetRouterVersion_StonfiV2Result
	err = stack.Unmarshal(&result)
	return "GetRouterVersion_StonfiV2Result", result, err
}

type GetSaleData_BasicResult struct {
	Marketplace    tlb.MsgAddress
	Nft            tlb.MsgAddress
	Owner          tlb.MsgAddress
	FullPrice      tlb.Int257
	MarketFee      uint64
	RoyaltyAddress tlb.MsgAddress
	RoyaltyAmount  uint64
}

type GetSaleData_GetgemsAuctionResult struct {
	Magic            uint64
	End              bool
	EndTime          uint32
	Marketplace      tlb.MsgAddress
	Nft              tlb.MsgAddress
	Owner            tlb.MsgAddress
	LastBid          uint64
	LastMember       tlb.MsgAddress
	MinStep          uint64
	MarketFeeAddress tlb.MsgAddress
	MpFeeFactor      uint32
	MpFeeBase        uint32
	RoyaltyAddress   tlb.MsgAddress
	RoyaltyFeeFactor uint32
	RoyaltyFeeBase   uint32
	MaxBid           uint64
	MinBid           uint64
	CreatedAt        uint32
	LastBidAt        uint32
	IsCanceled       bool
}

type GetSaleData_GetgemsResult struct {
	Magic            uint64
	IsComplete       bool
	CreatedAt        uint64
	Marketplace      tlb.MsgAddress
	Nft              tlb.MsgAddress
	Owner            tlb.MsgAddress
	FullPrice        tlb.Int257
	MarketFeeAddress tlb.MsgAddress
	MarketFee        uint64
	RoyaltyAddress   tlb.MsgAddress
	RoyaltyAmount    uint64
}

func GetSaleData(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 72748 for "get_sale_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 72748, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetSaleData_BasicResult, DecodeGetSaleData_GetgemsResult, DecodeGetSaleData_GetgemsAuctionResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetSaleData_BasicResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 7 || (stack[0].SumType != "VmStkSlice") || (stack[1].SumType != "VmStkSlice") || (stack[2].SumType != "VmStkSlice") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") || (stack[4].SumType != "VmStkTinyInt" && stack[4].SumType != "VmStkInt") || (stack[5].SumType != "VmStkSlice") || (stack[6].SumType != "VmStkTinyInt" && stack[6].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetSaleData_BasicResult
	err = stack.Unmarshal(&result)
	return "GetSaleData_BasicResult", result, err
}

func DecodeGetSaleData_GetgemsResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 11 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkSlice") || (stack[4].SumType != "VmStkSlice") || (stack[5].SumType != "VmStkSlice") || (stack[6].SumType != "VmStkTinyInt" && stack[6].SumType != "VmStkInt") || (stack[7].SumType != "VmStkSlice") || (stack[8].SumType != "VmStkTinyInt" && stack[8].SumType != "VmStkInt") || (stack[9].SumType != "VmStkSlice") || (stack[10].SumType != "VmStkTinyInt" && stack[10].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetSaleData_GetgemsResult
	err = stack.Unmarshal(&result)
	return "GetSaleData_GetgemsResult", result, err
}

func DecodeGetSaleData_GetgemsAuctionResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 20 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkSlice") || (stack[4].SumType != "VmStkSlice") || (stack[5].SumType != "VmStkSlice") || (stack[6].SumType != "VmStkTinyInt" && stack[6].SumType != "VmStkInt") || (stack[7].SumType != "VmStkSlice") || (stack[8].SumType != "VmStkTinyInt" && stack[8].SumType != "VmStkInt") || (stack[9].SumType != "VmStkSlice") || (stack[10].SumType != "VmStkTinyInt" && stack[10].SumType != "VmStkInt") || (stack[11].SumType != "VmStkTinyInt" && stack[11].SumType != "VmStkInt") || (stack[12].SumType != "VmStkSlice") || (stack[13].SumType != "VmStkTinyInt" && stack[13].SumType != "VmStkInt") || (stack[14].SumType != "VmStkTinyInt" && stack[14].SumType != "VmStkInt") || (stack[15].SumType != "VmStkTinyInt" && stack[15].SumType != "VmStkInt") || (stack[16].SumType != "VmStkTinyInt" && stack[16].SumType != "VmStkInt") || (stack[17].SumType != "VmStkTinyInt" && stack[17].SumType != "VmStkInt") || (stack[18].SumType != "VmStkTinyInt" && stack[18].SumType != "VmStkInt") || (stack[19].SumType != "VmStkTinyInt" && stack[19].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetSaleData_GetgemsAuctionResult
	err = stack.Unmarshal(&result)
	return "GetSaleData_GetgemsAuctionResult", result, err
}

type GetSpotPrice_StormResult struct {
	SpotPrice tlb.Grams
}

func GetSpotPrice(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 87675 for "get_spot_price" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 87675, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetSpotPrice_StormResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetSpotPrice_StormResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetSpotPrice_StormResult
	err = stack.Unmarshal(&result)
	return "GetSpotPrice_StormResult", result, err
}

type GetStakingStatusResult struct {
	StakeAt             uint32
	StakeUntil          uint32
	StakeSent           uint64
	QuerySent           bool
	CouldUnlock         bool
	Locked              bool
	ProxyStakeLockFinal bool
}

func GetStakingStatus(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 123928 for "get_staking_status" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 123928, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetStakingStatusResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetStakingStatusResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 7 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") || (stack[4].SumType != "VmStkTinyInt" && stack[4].SumType != "VmStkInt") || (stack[5].SumType != "VmStkTinyInt" && stack[5].SumType != "VmStkInt") || (stack[6].SumType != "VmStkTinyInt" && stack[6].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetStakingStatusResult
	err = stack.Unmarshal(&result)
	return "GetStakingStatusResult", result, err
}

type GetStatusResult struct {
	Status uint8
}

func GetStatus(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 100881 for "get_status" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 100881, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetStatusResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetStatusResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetStatusResult
	err = stack.Unmarshal(&result)
	return "GetStatusResult", result, err
}

type GetStorageContractAddressResult struct {
	StorageContractAddress tlb.MsgAddress
}

func GetStorageContractAddress(ctx context.Context, executor Executor, reqAccountID ton.AccountID, merkleHash tlb.Int257, fileSize uint64, client tlb.MsgAddress, torrentHash tlb.Int257) (string, any, error) {
	stack := tlb.VmStack{}
	var (
		val tlb.VmStackValue
		err error
	)
	val = tlb.VmStackValue{SumType: "VmStkInt", VmStkInt: merkleHash}
	stack.Put(val)
	val = tlb.VmStackValue{SumType: "VmStkTinyInt", VmStkTinyInt: int64(fileSize)}
	stack.Put(val)
	val, err = tlb.TlbStructToVmCellSlice(client)
	if err != nil {
		return "", nil, err
	}
	stack.Put(val)
	val = tlb.VmStackValue{SumType: "VmStkInt", VmStkInt: torrentHash}
	stack.Put(val)

	// MethodID = 119729 for "get_storage_contract_address" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 119729, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetStorageContractAddressResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetStorageContractAddressResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 1 || (stack[0].SumType != "VmStkSlice") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetStorageContractAddressResult
	err = stack.Unmarshal(&result)
	return "GetStorageContractAddressResult", result, err
}

type GetStorageContractDataResult struct {
	Active        bool
	Balance       uint64
	Provider      tlb.MsgAddress
	MerkleHash    tlb.Int257
	FileSize      uint64
	NextProof     uint64
	RatePerMbDay  uint64
	MaxSpan       uint32
	LastProofTime uint32
	Client        tlb.MsgAddress
	TorrentHash   tlb.Int257
}

func GetStorageContractData(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 86593 for "get_storage_contract_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 86593, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetStorageContractDataResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetStorageContractDataResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 11 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkSlice") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") || (stack[4].SumType != "VmStkTinyInt" && stack[4].SumType != "VmStkInt") || (stack[5].SumType != "VmStkTinyInt" && stack[5].SumType != "VmStkInt") || (stack[6].SumType != "VmStkTinyInt" && stack[6].SumType != "VmStkInt") || (stack[7].SumType != "VmStkTinyInt" && stack[7].SumType != "VmStkInt") || (stack[8].SumType != "VmStkTinyInt" && stack[8].SumType != "VmStkInt") || (stack[9].SumType != "VmStkSlice") || (stack[10].SumType != "VmStkTinyInt" && stack[10].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetStorageContractDataResult
	err = stack.Unmarshal(&result)
	return "GetStorageContractDataResult", result, err
}

type GetStorageParamsResult struct {
	AcceptNewContracts bool
	RatePerMbDay       uint64
	MaxSpan            uint32
	MinimalFileSize    uint64
	MaximalFileSize    uint64
}

func GetStorageParams(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 104346 for "get_storage_params" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 104346, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetStorageParamsResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetStorageParamsResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 5 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") || (stack[4].SumType != "VmStkTinyInt" && stack[4].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetStorageParamsResult
	err = stack.Unmarshal(&result)
	return "GetStorageParamsResult", result, err
}

type GetSubscriptionDataResult struct {
	Wallet struct {
		Workchain uint32
		Address   tlb.Bits256
	}

	Beneficiary struct {
		Workchain uint32
		Address   tlb.Bits256
	}

	Amount          uint64
	Period          uint64
	StartTime       uint64
	Timeout         uint64
	LastPaymentTime uint64
	LastRequestTime uint64
	FailedAttempts  uint32
	SubscriptionId  uint64
}

func GetSubscriptionData(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 92260 for "get_subscription_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 92260, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetSubscriptionDataResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetSubscriptionDataResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 10 || (stack[0].SumType != "VmStkTuple") || (stack[1].SumType != "VmStkTuple") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") || (stack[4].SumType != "VmStkTinyInt" && stack[4].SumType != "VmStkInt") || (stack[5].SumType != "VmStkTinyInt" && stack[5].SumType != "VmStkInt") || (stack[6].SumType != "VmStkTinyInt" && stack[6].SumType != "VmStkInt") || (stack[7].SumType != "VmStkTinyInt" && stack[7].SumType != "VmStkInt") || (stack[8].SumType != "VmStkTinyInt" && stack[8].SumType != "VmStkInt") || (stack[9].SumType != "VmStkTinyInt" && stack[9].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetSubscriptionDataResult
	err = stack.Unmarshal(&result)
	return "GetSubscriptionDataResult", result, err
}

type GetSubscriptionInfo_V2Result struct {
	Wallet         tlb.MsgAddress
	WalletVersion  uint8
	Beneficiary    tlb.MsgAddress
	SubscriptionId uint64
	Metadata       tlb.Any
}

func GetSubscriptionInfo(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 129292 for "get_subscription_info" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 129292, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetSubscriptionInfo_V2Result} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetSubscriptionInfo_V2Result(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 5 || (stack[0].SumType != "VmStkSlice") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkSlice") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") || (stack[4].SumType != "VmStkCell") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetSubscriptionInfo_V2Result
	err = stack.Unmarshal(&result)
	return "GetSubscriptionInfo_V2Result", result, err
}

type GetSubwalletIdResult struct {
	SubwalletId uint32
}

func GetSubwalletId(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 81467 for "get_subwallet_id" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 81467, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetSubwalletIdResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetSubwalletIdResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetSubwalletIdResult
	err = stack.Unmarshal(&result)
	return "GetSubwalletIdResult", result, err
}

type GetTargetBalances_DedustResult struct {
	Reserve0 tlb.Int257
	Reserve1 tlb.Int257
}

func GetTargetBalances(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 84232 for "get_target_balances" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 84232, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetTargetBalances_DedustResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetTargetBalances_DedustResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 2 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetTargetBalances_DedustResult
	err = stack.Unmarshal(&result)
	return "GetTargetBalances_DedustResult", result, err
}

type GetTelemintAuctionConfigResult struct {
	Beneficiar    tlb.MsgAddress
	InitialMinBid int64
	MaxBid        int64
	MinBidStep    int64
	MinExtendTime int64
	Duration      int64
}

func GetTelemintAuctionConfig(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 129619 for "get_telemint_auction_config" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 129619, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetTelemintAuctionConfigResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetTelemintAuctionConfigResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 6 || (stack[0].SumType != "VmStkSlice") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") || (stack[4].SumType != "VmStkTinyInt" && stack[4].SumType != "VmStkInt") || (stack[5].SumType != "VmStkTinyInt" && stack[5].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetTelemintAuctionConfigResult
	err = stack.Unmarshal(&result)
	return "GetTelemintAuctionConfigResult", result, err
}

type GetTelemintAuctionStateResult struct {
	Bidder  tlb.MsgAddress
	Bid     int64
	BidTs   int64
	MinBid  int64
	EndTime int64
}

func GetTelemintAuctionState(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 122498 for "get_telemint_auction_state" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 122498, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetTelemintAuctionStateResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetTelemintAuctionStateResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 5 || (stack[0].SumType != "VmStkSlice") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") || (stack[4].SumType != "VmStkTinyInt" && stack[4].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetTelemintAuctionStateResult
	err = stack.Unmarshal(&result)
	return "GetTelemintAuctionStateResult", result, err
}

type GetTelemintTokenNameResult struct {
	Username tlb.Text
}

func GetTelemintTokenName(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 69506 for "get_telemint_token_name" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 69506, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetTelemintTokenNameResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetTelemintTokenNameResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkSlice") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetTelemintTokenNameResult
	err = stack.Unmarshal(&result)
	return "GetTelemintTokenNameResult", result, err
}

type GetTerminalAmmPrice_StormResult struct {
	TerminalPrice int64
}

func GetTerminalAmmPrice(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 108868 for "get_terminal_amm_price" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 108868, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetTerminalAmmPrice_StormResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetTerminalAmmPrice_StormResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetTerminalAmmPrice_StormResult
	err = stack.Unmarshal(&result)
	return "GetTerminalAmmPrice_StormResult", result, err
}

type GetTimeoutResult struct {
	Timeout uint32
}

func GetTimeout(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 105070 for "get_timeout" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 105070, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetTimeoutResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetTimeoutResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetTimeoutResult
	err = stack.Unmarshal(&result)
	return "GetTimeoutResult", result, err
}

type GetTorrentHashResult struct {
	TorrentHash tlb.Int257
}

func GetTorrentHash(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 71463 for "get_torrent_hash" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 71463, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetTorrentHashResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetTorrentHashResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 1 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetTorrentHashResult
	err = stack.Unmarshal(&result)
	return "GetTorrentHashResult", result, err
}

type GetTradeFee_DedustResult struct {
	TradeFeeNumerator   tlb.Int257
	TradeFeeDenominator tlb.Int257
}

func GetTradeFee(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 96780 for "get_trade_fee" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 96780, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetTradeFee_DedustResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetTradeFee_DedustResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 2 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetTradeFee_DedustResult
	err = stack.Unmarshal(&result)
	return "GetTradeFee_DedustResult", result, err
}

type GetValidatorControllerDataResult struct {
	State                    int32
	Halted                   bool
	Approved                 bool
	StakeAmountSent          int64
	StakeAt                  uint32
	SavedValidatorSetHash    tlb.Bits256
	ValidatorSetChangesCount int32
	ValidatorSetChangeTime   uint32
	StakeHeldFor             uint32
	BorrowedAmount           int64
	BorrowingTime            uint32
	Validator                tlb.MsgAddress
	Pool                     tlb.MsgAddress
	Sudoer                   tlb.MsgAddress
}

func GetValidatorControllerData(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 103232 for "get_validator_controller_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 103232, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetValidatorControllerDataResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetValidatorControllerDataResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 14 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") || (stack[4].SumType != "VmStkTinyInt" && stack[4].SumType != "VmStkInt") || (stack[5].SumType != "VmStkTinyInt" && stack[5].SumType != "VmStkInt") || (stack[6].SumType != "VmStkTinyInt" && stack[6].SumType != "VmStkInt") || (stack[7].SumType != "VmStkTinyInt" && stack[7].SumType != "VmStkInt") || (stack[8].SumType != "VmStkTinyInt" && stack[8].SumType != "VmStkInt") || (stack[9].SumType != "VmStkTinyInt" && stack[9].SumType != "VmStkInt") || (stack[10].SumType != "VmStkTinyInt" && stack[10].SumType != "VmStkInt") || (stack[11].SumType != "VmStkSlice") || (stack[12].SumType != "VmStkSlice") || (stack[13].SumType != "VmStkSlice") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetValidatorControllerDataResult
	err = stack.Unmarshal(&result)
	return "GetValidatorControllerDataResult", result, err
}

type GetVammType_StormResult struct {
	VammType uint32
}

func GetVammType(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 107494 for "get_vamm_type" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 107494, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetVammType_StormResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetVammType_StormResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetVammType_StormResult
	err = stack.Unmarshal(&result)
	return "GetVammType_StormResult", result, err
}

type GetVaultAddress_DedustResult struct {
	VaultAddr tlb.MsgAddress
}

func GetVaultAddress(ctx context.Context, executor Executor, reqAccountID ton.AccountID, asset DedustAsset) (string, any, error) {
	stack := tlb.VmStack{}
	var (
		val tlb.VmStackValue
		err error
	)
	val, err = tlb.TlbStructToVmCellSlice(asset)
	if err != nil {
		return "", nil, err
	}
	stack.Put(val)

	// MethodID = 76695 for "get_vault_address" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 76695, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetVaultAddress_DedustResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetVaultAddress_DedustResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkSlice") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetVaultAddress_DedustResult
	err = stack.Unmarshal(&result)
	return "GetVaultAddress_DedustResult", result, err
}

type GetVaultContractData_StormResult struct {
	Data boc.Cell
}

func GetVaultContractData(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 98607 for "get_vault_contract_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 98607, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetVaultContractData_StormResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetVaultContractData_StormResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkCell") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetVaultContractData_StormResult
	err = stack.Unmarshal(&result)
	return "GetVaultContractData_StormResult", result, err
}

type GetVaultData_StonfiV2Result struct {
	OwnerAddress    tlb.MsgAddress
	TokenAddress    tlb.MsgAddress
	RouterAddress   tlb.MsgAddress
	DepositedAmount tlb.Int257
}

type GetVaultData_StormResult struct {
	JettonWallet     tlb.MsgAddress
	Rate             uint64
	TotalSupply      uint64
	FreeBalance      uint64
	LockedBalance    uint64
	StakersBalance   uint64
	ExecutorsBalance uint64
}

func GetVaultData(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 127184 for "get_vault_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 127184, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetVaultData_StonfiV2Result, DecodeGetVaultData_StormResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetVaultData_StonfiV2Result(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 4 || (stack[0].SumType != "VmStkSlice") || (stack[1].SumType != "VmStkSlice") || (stack[2].SumType != "VmStkSlice") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetVaultData_StonfiV2Result
	err = stack.Unmarshal(&result)
	return "GetVaultData_StonfiV2Result", result, err
}

func DecodeGetVaultData_StormResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 7 || (stack[0].SumType != "VmStkSlice") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") || (stack[3].SumType != "VmStkTinyInt" && stack[3].SumType != "VmStkInt") || (stack[4].SumType != "VmStkTinyInt" && stack[4].SumType != "VmStkInt") || (stack[5].SumType != "VmStkTinyInt" && stack[5].SumType != "VmStkInt") || (stack[6].SumType != "VmStkTinyInt" && stack[6].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetVaultData_StormResult
	err = stack.Unmarshal(&result)
	return "GetVaultData_StormResult", result, err
}

type GetVaultType_StormResult struct {
	VaultType uint32
}

func GetVaultType(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 101877 for "get_vault_type" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 101877, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetVaultType_StormResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetVaultType_StormResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetVaultType_StormResult
	err = stack.Unmarshal(&result)
	return "GetVaultType_StormResult", result, err
}

type GetVaultWhitelistedAddresses_StormResult struct {
	WhitelistedAddrsDict boc.Cell
}

func GetVaultWhitelistedAddresses(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 69018 for "get_vault_whitelisted_addresses" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 69018, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetVaultWhitelistedAddresses_StormResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetVaultWhitelistedAddresses_StormResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkCell") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetVaultWhitelistedAddresses_StormResult
	err = stack.Unmarshal(&result)
	return "GetVaultWhitelistedAddresses_StormResult", result, err
}

type GetWalletAddressResult struct {
	JettonWalletAddress tlb.MsgAddress
}

func GetWalletAddress(ctx context.Context, executor Executor, reqAccountID ton.AccountID, ownerAddress tlb.MsgAddress) (string, any, error) {
	stack := tlb.VmStack{}
	var (
		val tlb.VmStackValue
		err error
	)
	val, err = tlb.TlbStructToVmCellSlice(ownerAddress)
	if err != nil {
		return "", nil, err
	}
	stack.Put(val)

	// MethodID = 103289 for "get_wallet_address" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 103289, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetWalletAddressResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetWalletAddressResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 1 || (stack[0].SumType != "VmStkSlice") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetWalletAddressResult
	err = stack.Unmarshal(&result)
	return "GetWalletAddressResult", result, err
}

type GetWalletDataResult struct {
	Balance          tlb.Int257
	Owner            tlb.MsgAddress
	Jetton           tlb.MsgAddress
	JettonWalletCode tlb.Any
}

func GetWalletData(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 97026 for "get_wallet_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 97026, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetWalletDataResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetWalletDataResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 4 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkSlice") || (stack[2].SumType != "VmStkSlice") || (stack[3].SumType != "VmStkCell") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetWalletDataResult
	err = stack.Unmarshal(&result)
	return "GetWalletDataResult", result, err
}

type GetWalletParamsResult struct {
	Seqno     uint32
	Subwallet uint32
	PublicKey tlb.Int257
}

func GetWalletParams(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 130271 for "get_wallet_params" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 130271, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeGetWalletParamsResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeGetWalletParamsResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 3 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkTinyInt" && stack[2].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result GetWalletParamsResult
	err = stack.Unmarshal(&result)
	return "GetWalletParamsResult", result, err
}

type IsActiveResult struct {
	IsActive bool
}

func IsActive(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 122058 for "is_active" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 122058, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeIsActiveResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeIsActiveResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 1 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result IsActiveResult
	err = stack.Unmarshal(&result)
	return "IsActiveResult", result, err
}

type IsClaimedResult struct {
	Claimed bool
}

func IsClaimed(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 122284 for "is_claimed" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 122284, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeIsClaimedResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeIsClaimedResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result IsClaimedResult
	err = stack.Unmarshal(&result)
	return "IsClaimedResult", result, err
}

type IsPluginInstalledResult struct {
	Success bool
}

func IsPluginInstalled(ctx context.Context, executor Executor, reqAccountID ton.AccountID, workchain int32, addrHash tlb.Int257) (string, any, error) {
	stack := tlb.VmStack{}
	var (
		val tlb.VmStackValue
		err error
	)
	val = tlb.VmStackValue{SumType: "VmStkTinyInt", VmStkTinyInt: int64(workchain)}
	stack.Put(val)
	val = tlb.VmStackValue{SumType: "VmStkInt", VmStkInt: addrHash}
	stack.Put(val)

	// MethodID = 76407 for "is_plugin_installed" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 76407, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeIsPluginInstalledResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeIsPluginInstalledResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 1 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result IsPluginInstalledResult
	err = stack.Unmarshal(&result)
	return "IsPluginInstalledResult", result, err
}

type IsStable_DedustResult struct {
	IsStable bool
}

func IsStable(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 103723 for "is_stable" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 103723, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeIsStable_DedustResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeIsStable_DedustResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result IsStable_DedustResult
	err = stack.Unmarshal(&result)
	return "IsStable_DedustResult", result, err
}

type JettonWalletLockDataResult struct {
	FullBalance          tlb.Int257
	IndividualUnlockTime uint32
}

func JettonWalletLockData(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 128979 for "jetton_wallet_lock_data" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 128979, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeJettonWalletLockDataResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeJettonWalletLockDataResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 2 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result JettonWalletLockDataResult
	err = stack.Unmarshal(&result)
	return "JettonWalletLockDataResult", result, err
}

type ListNominatorsResult struct {
	Nominators []struct {
		Address              tlb.Bits256
		Amount               uint64
		PendingDepositAmount uint64
		WithdrawRequested    bool
	}
}

func ListNominators(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 111161 for "list_nominators" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 111161, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeListNominatorsResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeListNominatorsResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 1 || (stack[0].SumType != "VmStkTuple" && stack[0].SumType != "VmStkNull") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result ListNominatorsResult
	err = stack.Unmarshal(&result)
	return "ListNominatorsResult", result, err
}

type ListVotesResult struct {
	Votes []struct {
		ProposalHash   tlb.Bits256
		VoteCreateTime uint32
	}
}

func ListVotes(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 130309 for "list_votes" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 130309, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeListVotesResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeListVotesResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 1 || (stack[0].SumType != "VmStkTuple" && stack[0].SumType != "VmStkNull") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result ListVotesResult
	err = stack.Unmarshal(&result)
	return "ListVotesResult", result, err
}

type RoyaltyParamsResult struct {
	Numerator   uint16
	Denominator uint16
	Destination tlb.MsgAddress
}

func RoyaltyParams(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 85719 for "royalty_params" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 85719, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeRoyaltyParamsResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeRoyaltyParamsResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) < 3 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") || (stack[1].SumType != "VmStkTinyInt" && stack[1].SumType != "VmStkInt") || (stack[2].SumType != "VmStkSlice") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result RoyaltyParamsResult
	err = stack.Unmarshal(&result)
	return "RoyaltyParamsResult", result, err
}

type SeqnoResult struct {
	State uint32
}

func Seqno(ctx context.Context, executor Executor, reqAccountID ton.AccountID) (string, any, error) {
	stack := tlb.VmStack{}

	// MethodID = 85143 for "seqno" method
	errCode, stack, err := executor.RunSmcMethodByID(ctx, reqAccountID, 85143, stack)
	if err != nil {
		return "", nil, err
	}
	if errCode != 0 && errCode != 1 {
		return "", nil, fmt.Errorf("method execution failed with code: %v", errCode)
	}
	for _, f := range []func(tlb.VmStack) (string, any, error){DecodeSeqnoResult} {
		s, r, err := f(stack)
		if err == nil {
			return s, r, nil
		}
	}
	return "", nil, fmt.Errorf("can not decode outputs")
}

func DecodeSeqnoResult(stack tlb.VmStack) (resultType string, resultAny any, err error) {
	if len(stack) != 1 || (stack[0].SumType != "VmStkTinyInt" && stack[0].SumType != "VmStkInt") {
		return "", nil, fmt.Errorf("invalid stack format")
	}
	var result SeqnoResult
	err = stack.Unmarshal(&result)
	return "SeqnoResult", result, err
}
