package abi
// Code autogenerated. DO NOT EDIT. 

import (
"fmt"
"github.com/tonkeeper/tongo/boc"
"github.com/tonkeeper/tongo/tlb"
)

// MessageDecoder takes in a message body as a cell and tries to decode it based on the first 4 bytes.
// On success, it returns an operation name and a decoded body.
func MessageDecoder(cell *boc.Cell) (MsgOpName, any, error) {
	tag, err := cell.ReadUint(32)
	if err != nil {
		return "", nil, err
	}
	switch uint32(tag) {
	case TextCommentMsgOpCode: // 0x0
		var res TextCommentMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TextCommentMsgOp, nil, err
		}
		return TextCommentMsgOp, res, nil
	case ProveOwnershipMsgOpCode: // 0x4ded148
		var res ProveOwnershipMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return ProveOwnershipMsgOp, nil, err
		}
		return ProveOwnershipMsgOp, res, nil
	case NftOwnershipAssignedMsgOpCode: // 0x5138d91
		var res NftOwnershipAssignedMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return NftOwnershipAssignedMsgOp, nil, err
		}
		return NftOwnershipAssignedMsgOp, res, nil
	case OwnershipProofMsgOpCode: // 0x524c7ae
		var res OwnershipProofMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return OwnershipProofMsgOp, nil, err
		}
		return OwnershipProofMsgOp, res, nil
	case ChallengeQuarantinedChannelStateMsgOpCode: // 0x88eaa32
		var res ChallengeQuarantinedChannelStateMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return ChallengeQuarantinedChannelStateMsgOp, nil, err
		}
		return ChallengeQuarantinedChannelStateMsgOp, res, nil
	case TonstakePoolWithdrawalMsgOpCode: // 0xa77535c
		var res TonstakePoolWithdrawalMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakePoolWithdrawalMsgOp, nil, err
		}
		return TonstakePoolWithdrawalMsgOp, res, nil
	case SbtOwnerInfoMsgOpCode: // 0xdd607e3
		var res SbtOwnerInfoMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return SbtOwnerInfoMsgOp, nil, err
		}
		return SbtOwnerInfoMsgOp, res, nil
	case InitPaymentChannelMsgOpCode: // 0xe0620c2
		var res InitPaymentChannelMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return InitPaymentChannelMsgOp, nil, err
		}
		return InitPaymentChannelMsgOp, res, nil
	case JettonTransferMsgOpCode: // 0xf8a7ea5
		var res JettonTransferMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return JettonTransferMsgOp, nil, err
		}
		return JettonTransferMsgOp, res, nil
	case OfferStorageContractMsgOpCode: // 0x107c49ef
		var res OfferStorageContractMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return OfferStorageContractMsgOp, nil, err
		}
		return OfferStorageContractMsgOp, res, nil
	case TonstakeNftInitMsgOpCode: // 0x132f9a45
		var res TonstakeNftInitMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakeNftInitMsgOp, nil, err
		}
		return TonstakeNftInitMsgOp, res, nil
	case TonstakeControllerPoolHaltMsgOpCode: // 0x139a1b4e
		var res TonstakeControllerPoolHaltMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakeControllerPoolHaltMsgOp, nil, err
		}
		return TonstakeControllerPoolHaltMsgOp, res, nil
	case WhalesNominatorsForceKickMsgOpCode: // 0x1596920c
		var res WhalesNominatorsForceKickMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return WhalesNominatorsForceKickMsgOp, nil, err
		}
		return WhalesNominatorsForceKickMsgOp, res, nil
	case TonstakeControllerCreditMsgOpCode: // 0x1690c604
		var res TonstakeControllerCreditMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakeControllerCreditMsgOp, nil, err
		}
		return TonstakeControllerCreditMsgOp, res, nil
	case JettonInternalTransferMsgOpCode: // 0x178d4519
		var res JettonInternalTransferMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return JettonInternalTransferMsgOp, nil, err
		}
		return JettonInternalTransferMsgOp, res, nil
	case WhalesNominatorsWithdrawUnownedResponseMsgOpCode: // 0x1d1715bf
		var res WhalesNominatorsWithdrawUnownedResponseMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return WhalesNominatorsWithdrawUnownedResponseMsgOp, nil, err
		}
		return WhalesNominatorsWithdrawUnownedResponseMsgOp, res, nil
	case SbtDestroyMsgOpCode: // 0x1f04537a
		var res SbtDestroyMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return SbtDestroyMsgOp, nil, err
		}
		return SbtDestroyMsgOp, res, nil
	case StartUncooperativeChannelCloseMsgOpCode: // 0x1f151acf
		var res StartUncooperativeChannelCloseMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return StartUncooperativeChannelCloseMsgOp, nil, err
		}
		return StartUncooperativeChannelCloseMsgOp, res, nil
	case WhalesNominatorsStakeWithdrawCompletedMsgOpCode: // 0x23d421e1
		var res WhalesNominatorsStakeWithdrawCompletedMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return WhalesNominatorsStakeWithdrawCompletedMsgOp, nil, err
		}
		if cell.RefsAvailableForRead() > 0 || cell.BitsAvailableForRead() > 0 {
			return WhalesNominatorsStakeWithdrawCompletedMsgOp, nil, ErrStructSizeMismatch
		}
		return WhalesNominatorsStakeWithdrawCompletedMsgOp, res, nil
	case WhalesNominatorsWithdrawUnownedMsgOpCode: // 0x251d6a98
		var res WhalesNominatorsWithdrawUnownedMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return WhalesNominatorsWithdrawUnownedMsgOp, nil, err
		}
		if cell.RefsAvailableForRead() > 0 || cell.BitsAvailableForRead() > 0 {
			return WhalesNominatorsWithdrawUnownedMsgOp, nil, ErrStructSizeMismatch
		}
		return WhalesNominatorsWithdrawUnownedMsgOp, res, nil
	case FinishUncooperativeChannelCloseMsgOpCode: // 0x25432a91
		var res FinishUncooperativeChannelCloseMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return FinishUncooperativeChannelCloseMsgOp, nil, err
		}
		return FinishUncooperativeChannelCloseMsgOp, res, nil
	case TonstakeControllerPoolSendMessageMsgOpCode: // 0x270695fb
		var res TonstakeControllerPoolSendMessageMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakeControllerPoolSendMessageMsgOp, nil, err
		}
		return TonstakeControllerPoolSendMessageMsgOp, res, nil
	case TeleitemDeployMsgOpCode: // 0x299a3e15
		var res TeleitemDeployMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TeleitemDeployMsgOp, nil, err
		}
		return TeleitemDeployMsgOp, res, nil
	case TonstakePoolSetGovernanceFeeMsgOpCode: // 0x2aaa96a0
		var res TonstakePoolSetGovernanceFeeMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakePoolSetGovernanceFeeMsgOp, nil, err
		}
		return TonstakePoolSetGovernanceFeeMsgOp, res, nil
	case GetStaticDataMsgOpCode: // 0x2fcb26a2
		var res GetStaticDataMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return GetStaticDataMsgOp, nil, err
		}
		return GetStaticDataMsgOp, res, nil
	case TonstakeControllerValidatorWithdrawalMsgOpCode: // 0x30026327
		var res TonstakeControllerValidatorWithdrawalMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakeControllerValidatorWithdrawalMsgOp, nil, err
		}
		return TonstakeControllerValidatorWithdrawalMsgOp, res, nil
	case TonstakePoolWithdrawMsgOpCode: // 0x319b0cdc
		var res TonstakePoolWithdrawMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakePoolWithdrawMsgOp, nil, err
		}
		return TonstakePoolWithdrawMsgOp, res, nil
	case TeleitemCancelAuctionMsgOpCode: // 0x371638ae
		var res TeleitemCancelAuctionMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TeleitemCancelAuctionMsgOp, nil, err
		}
		return TeleitemCancelAuctionMsgOp, res, nil
	case ProofStorageMsgOpCode: // 0x419d5d4d
		var res ProofStorageMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return ProofStorageMsgOp, nil, err
		}
		return ProofStorageMsgOp, res, nil
	case TelemintDeployMsgOpCode: // 0x4637289a
		var res TelemintDeployMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TelemintDeployMsgOp, nil, err
		}
		return TelemintDeployMsgOp, res, nil
	case TelemintDeployV2MsgOpCode: // 0x4637289b
		var res TelemintDeployV2MsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TelemintDeployV2MsgOp, nil, err
		}
		return TelemintDeployV2MsgOp, res, nil
	case StorageWithdrawMsgOpCode: // 0x46ed2e94
		var res StorageWithdrawMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return StorageWithdrawMsgOp, nil, err
		}
		return StorageWithdrawMsgOp, res, nil
	case ElectorRecoverStakeRequestMsgOpCode: // 0x47657424
		var res ElectorRecoverStakeRequestMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return ElectorRecoverStakeRequestMsgOp, nil, err
		}
		return ElectorRecoverStakeRequestMsgOp, res, nil
	case TonstakePoolDepositMsgOpCode: // 0x47d54391
		var res TonstakePoolDepositMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakePoolDepositMsgOp, nil, err
		}
		return TonstakePoolDepositMsgOp, res, nil
	case TeleitemStartAuctionMsgOpCode: // 0x487a8e81
		var res TeleitemStartAuctionMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TeleitemStartAuctionMsgOp, nil, err
		}
		return TeleitemStartAuctionMsgOp, res, nil
	case TonstakePoolTouchMsgOpCode: // 0x4bc7c2df
		var res TonstakePoolTouchMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakePoolTouchMsgOp, nil, err
		}
		return TonstakePoolTouchMsgOp, res, nil
	case ElectorNewStakeMsgOpCode: // 0x4e73744b
		var res ElectorNewStakeMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return ElectorNewStakeMsgOp, nil, err
		}
		return ElectorNewStakeMsgOp, res, nil
	case UpdatePubkeyMsgOpCode: // 0x53f34cd6
		var res UpdatePubkeyMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return UpdatePubkeyMsgOp, nil, err
		}
		return UpdatePubkeyMsgOp, res, nil
	case UpdateStorageParamsMsgOpCode: // 0x54cbf19b
		var res UpdateStorageParamsMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return UpdateStorageParamsMsgOp, nil, err
		}
		return UpdateStorageParamsMsgOp, res, nil
	case TonstakeImanagerOperationFeeMsgOpCode: // 0x54d37487
		var res TonstakeImanagerOperationFeeMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakeImanagerOperationFeeMsgOp, nil, err
		}
		return TonstakeImanagerOperationFeeMsgOp, res, nil
	case ChannelCooperativeCloseMsgOpCode: // 0x5577587e
		var res ChannelCooperativeCloseMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return ChannelCooperativeCloseMsgOp, nil, err
		}
		return ChannelCooperativeCloseMsgOp, res, nil
	case TonstakeControllerReturnAvailableFundsMsgOpCode: // 0x55c26cd5
		var res TonstakeControllerReturnAvailableFundsMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakeControllerReturnAvailableFundsMsgOp, nil, err
		}
		return TonstakeControllerReturnAvailableFundsMsgOp, res, nil
	case JettonBurnMsgOpCode: // 0x595f07bc
		var res JettonBurnMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return JettonBurnMsgOp, nil, err
		}
		return JettonBurnMsgOp, res, nil
	case TonstakePoolSetRolesMsgOpCode: // 0x5e517f36
		var res TonstakePoolSetRolesMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakePoolSetRolesMsgOp, nil, err
		}
		return TonstakePoolSetRolesMsgOp, res, nil
	case NftTransferMsgOpCode: // 0x5fcc3d14
		var res NftTransferMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return NftTransferMsgOp, nil, err
		}
		return NftTransferMsgOp, res, nil
	case TonstakeControllerSendRequestLoanMsgOpCode: // 0x6335b11a
		var res TonstakeControllerSendRequestLoanMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakeControllerSendRequestLoanMsgOp, nil, err
		}
		return TonstakeControllerSendRequestLoanMsgOp, res, nil
	case WalletPluginDestructMsgOpCode: // 0x64737472
		var res WalletPluginDestructMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return WalletPluginDestructMsgOp, nil, err
		}
		return WalletPluginDestructMsgOp, res, nil
	case SettleChannelConditionalsMsgOpCode: // 0x66f6f069
		var res SettleChannelConditionalsMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return SettleChannelConditionalsMsgOp, nil, err
		}
		return SettleChannelConditionalsMsgOp, res, nil
	case TopUpChannelBalanceMsgOpCode: // 0x67c7d281
		var res TopUpChannelBalanceMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TopUpChannelBalanceMsgOp, nil, err
		}
		return TopUpChannelBalanceMsgOp, res, nil
	case GetRoyaltyParamsMsgOpCode: // 0x693d3950
		var res GetRoyaltyParamsMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return GetRoyaltyParamsMsgOp, nil, err
		}
		return GetRoyaltyParamsMsgOp, res, nil
	case SbtRevokeMsgOpCode: // 0x6f89f5e3
		var res SbtRevokeMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return SbtRevokeMsgOp, nil, err
		}
		return SbtRevokeMsgOp, res, nil
	case PaymentRequestMsgOpCode: // 0x706c7567
		var res PaymentRequestMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return PaymentRequestMsgOp, nil, err
		}
		return PaymentRequestMsgOp, res, nil
	case TonstakeControllerPoolUnhaltMsgOpCode: // 0x7247e7a5
		var res TonstakeControllerPoolUnhaltMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakeControllerPoolUnhaltMsgOp, nil, err
		}
		return TonstakeControllerPoolUnhaltMsgOp, res, nil
	case JettonNotifyMsgOpCode: // 0x7362d09c
		var res JettonNotifyMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return JettonNotifyMsgOp, nil, err
		}
		return JettonNotifyMsgOp, res, nil
	case SubscriptionPaymentMsgOpCode: // 0x73756273
		var res SubscriptionPaymentMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return SubscriptionPaymentMsgOp, nil, err
		}
		return SubscriptionPaymentMsgOp, res, nil
	case WhalesNominatorsStakeWithdrawDelayedMsgOpCode: // 0x74bb3427
		var res WhalesNominatorsStakeWithdrawDelayedMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return WhalesNominatorsStakeWithdrawDelayedMsgOp, nil, err
		}
		if cell.RefsAvailableForRead() > 0 || cell.BitsAvailableForRead() > 0 {
			return WhalesNominatorsStakeWithdrawDelayedMsgOp, nil, ErrStructSizeMismatch
		}
		return WhalesNominatorsStakeWithdrawDelayedMsgOp, res, nil
	case ChannelCooperativeCommitMsgOpCode: // 0x79a126ef
		var res ChannelCooperativeCommitMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return ChannelCooperativeCommitMsgOp, nil, err
		}
		return ChannelCooperativeCommitMsgOp, res, nil
	case TonstakeControllerPoolSetSudoerMsgOpCode: // 0x79e7c016
		var res TonstakeControllerPoolSetSudoerMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakeControllerPoolSetSudoerMsgOp, nil, err
		}
		return TonstakeControllerPoolSetSudoerMsgOp, res, nil
	case CloseStorageContractMsgOpCode: // 0x79f937ea
		var res CloseStorageContractMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return CloseStorageContractMsgOp, nil, err
		}
		return CloseStorageContractMsgOp, res, nil
	case AcceptStorageContractMsgOpCode: // 0x7a361688
		var res AcceptStorageContractMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return AcceptStorageContractMsgOp, nil, err
		}
		return AcceptStorageContractMsgOp, res, nil
	case TonstakeControllerApproveMsgOpCode: // 0x7b4b42e6
		var res TonstakeControllerApproveMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakeControllerApproveMsgOp, nil, err
		}
		return TonstakeControllerApproveMsgOp, res, nil
	case WhalesNominatorsDepositMsgOpCode: // 0x7bcd1fef
		var res WhalesNominatorsDepositMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return WhalesNominatorsDepositMsgOp, nil, err
		}
		return WhalesNominatorsDepositMsgOp, res, nil
	case ReportStaticDataMsgOpCode: // 0x8b771735
		var res ReportStaticDataMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return ReportStaticDataMsgOp, nil, err
		}
		return ReportStaticDataMsgOp, res, nil
	case TonstakeControllerWithdrawValidatorMsgOpCode: // 0x8efed779
		var res TonstakeControllerWithdrawValidatorMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakeControllerWithdrawValidatorMsgOp, nil, err
		}
		return TonstakeControllerWithdrawValidatorMsgOp, res, nil
	case TonstakeControllerPoolUpgradeMsgOpCode: // 0x96e7f528
		var res TonstakeControllerPoolUpgradeMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakeControllerPoolUpgradeMsgOp, nil, err
		}
		return TonstakeControllerPoolUpgradeMsgOp, res, nil
	case TonstakePoolPrepareGovernanceMigrationMsgOpCode: // 0x9971881c
		var res TonstakePoolPrepareGovernanceMigrationMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakePoolPrepareGovernanceMigrationMsgOp, nil, err
		}
		return TonstakePoolPrepareGovernanceMigrationMsgOp, res, nil
	case WhalesNominatorsAcceptStakeMsgOpCode: // 0x99a811fb
		var res WhalesNominatorsAcceptStakeMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return WhalesNominatorsAcceptStakeMsgOp, nil, err
		}
		return WhalesNominatorsAcceptStakeMsgOp, res, nil
	case TonstakePoolSetDepositSettingsMsgOpCode: // 0x9bf5561c
		var res TonstakePoolSetDepositSettingsMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakePoolSetDepositSettingsMsgOp, nil, err
		}
		return TonstakePoolSetDepositSettingsMsgOp, res, nil
	case WhalesNominatorsAcceptWithdrawsMsgOpCode: // 0xa19fd934
		var res WhalesNominatorsAcceptWithdrawsMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return WhalesNominatorsAcceptWithdrawsMsgOp, nil, err
		}
		return WhalesNominatorsAcceptWithdrawsMsgOp, res, nil
	case WhalesNominatorsSendStakeMsgOpCode: // 0xa2065f2c
		var res WhalesNominatorsSendStakeMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return WhalesNominatorsSendStakeMsgOp, nil, err
		}
		if cell.RefsAvailableForRead() > 0 || cell.BitsAvailableForRead() > 0 {
			return WhalesNominatorsSendStakeMsgOp, nil, ErrStructSizeMismatch
		}
		return WhalesNominatorsSendStakeMsgOp, res, nil
	case ReportRoyaltyParamsMsgOpCode: // 0xa8cb00ad
		var res ReportRoyaltyParamsMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return ReportRoyaltyParamsMsgOp, nil, err
		}
		return ReportRoyaltyParamsMsgOp, res, nil
	case StorageRewardWithdrawalMsgOpCode: // 0xa91baf56
		var res StorageRewardWithdrawalMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return StorageRewardWithdrawalMsgOp, nil, err
		}
		return StorageRewardWithdrawalMsgOp, res, nil
	case TonstakeImanagerRequestNotificationMsgOpCode: // 0xb1ebae06
		var res TonstakeImanagerRequestNotificationMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakeImanagerRequestNotificationMsgOp, nil, err
		}
		return TonstakeImanagerRequestNotificationMsgOp, res, nil
	case TonstakePoolDeployControllerMsgOpCode: // 0xb27edcad
		var res TonstakePoolDeployControllerMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakePoolDeployControllerMsgOp, nil, err
		}
		return TonstakePoolDeployControllerMsgOp, res, nil
	case StorageContractTerminatedMsgOpCode: // 0xb6236d63
		var res StorageContractTerminatedMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return StorageContractTerminatedMsgOp, nil, err
		}
		return StorageContractTerminatedMsgOp, res, nil
	case TonstakeImanagerStatsMsgOpCode: // 0xc1344900
		var res TonstakeImanagerStatsMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakeImanagerStatsMsgOp, nil, err
		}
		return TonstakeImanagerStatsMsgOp, res, nil
	case TonstakeImanagerSetInterestMsgOpCode: // 0xc9f04485
		var res TonstakeImanagerSetInterestMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakeImanagerSetInterestMsgOp, nil, err
		}
		return TonstakeImanagerSetInterestMsgOp, res, nil
	case SbtRequestOwnerMsgOpCode: // 0xd0c3bfea
		var res SbtRequestOwnerMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return SbtRequestOwnerMsgOp, nil, err
		}
		return SbtRequestOwnerMsgOp, res, nil
	case TonstakeControllerTopUpMsgOpCode: // 0xd372158c
		var res TonstakeControllerTopUpMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakeControllerTopUpMsgOp, nil, err
		}
		return TonstakeControllerTopUpMsgOp, res, nil
	case StorageContractConfirmedMsgOpCode: // 0xd4caedcd
		var res StorageContractConfirmedMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return StorageContractConfirmedMsgOp, nil, err
		}
		return StorageContractConfirmedMsgOp, res, nil
	case ExcessMsgOpCode: // 0xd53276db
		var res ExcessMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return ExcessMsgOp, nil, err
		}
		return ExcessMsgOp, res, nil
	case WhalesNominatorsWithdrawMsgOpCode: // 0xda803efd
		var res WhalesNominatorsWithdrawMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return WhalesNominatorsWithdrawMsgOp, nil, err
		}
		return WhalesNominatorsWithdrawMsgOp, res, nil
	case ChannelClosedMsgOpCode: // 0xdddc88ba
		var res ChannelClosedMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return ChannelClosedMsgOp, nil, err
		}
		return ChannelClosedMsgOp, res, nil
	case TonstakePoolLoanRepaymentMsgOpCode: // 0xdfdca27b
		var res TonstakePoolLoanRepaymentMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakePoolLoanRepaymentMsgOp, nil, err
		}
		return TonstakePoolLoanRepaymentMsgOp, res, nil
	case WalletPluginDestructResponseMsgOpCode: // 0xe4737472
		var res WalletPluginDestructResponseMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return WalletPluginDestructResponseMsgOp, nil, err
		}
		return WalletPluginDestructResponseMsgOp, res, nil
	case DeployStorageContractMsgOpCode: // 0xe4748df1
		var res DeployStorageContractMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return DeployStorageContractMsgOp, nil, err
		}
		return DeployStorageContractMsgOp, res, nil
	case TonstakePoolRequestLoanMsgOpCode: // 0xe642c965
		var res TonstakePoolRequestLoanMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakePoolRequestLoanMsgOp, nil, err
		}
		return TonstakePoolRequestLoanMsgOp, res, nil
	case TonstakeControllerDisapproveMsgOpCode: // 0xe8a0abfe
		var res TonstakeControllerDisapproveMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakeControllerDisapproveMsgOp, nil, err
		}
		return TonstakeControllerDisapproveMsgOp, res, nil
	case TonstakeControllerRecoverStakeMsgOpCode: // 0xeb373a05
		var res TonstakeControllerRecoverStakeMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakeControllerRecoverStakeMsgOp, nil, err
		}
		return TonstakeControllerRecoverStakeMsgOp, res, nil
	case TonstakeNftBurnNotificationMsgOpCode: // 0xed58b0b2
		var res TonstakeNftBurnNotificationMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakeNftBurnNotificationMsgOp, nil, err
		}
		return TonstakeNftBurnNotificationMsgOp, res, nil
	case TonstakeControllerReturnUnusedLoanMsgOpCode: // 0xed7378a6
		var res TonstakeControllerReturnUnusedLoanMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakeControllerReturnUnusedLoanMsgOp, nil, err
		}
		return TonstakeControllerReturnUnusedLoanMsgOp, res, nil
	case PaymentRequestResponseMsgOpCode: // 0xf06c7567
		var res PaymentRequestResponseMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return PaymentRequestResponseMsgOp, nil, err
		}
		return PaymentRequestResponseMsgOp, res, nil
	case TonstakeControllerUpdateValidatorHashMsgOpCode: // 0xf0fd2250
		var res TonstakeControllerUpdateValidatorHashMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakeControllerUpdateValidatorHashMsgOp, nil, err
		}
		return TonstakeControllerUpdateValidatorHashMsgOp, res, nil
	case TonstakeNftBurnMsgOpCode: // 0xf127fe4e
		var res TonstakeNftBurnMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return TonstakeNftBurnMsgOp, nil, err
		}
		return TonstakeNftBurnMsgOp, res, nil
	case ElectorNewStakeConfirmationMsgOpCode: // 0xf374484c
		var res ElectorNewStakeConfirmationMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return ElectorNewStakeConfirmationMsgOp, nil, err
		}
		return ElectorNewStakeConfirmationMsgOp, res, nil
	case ElectorRecoverStakeResponseMsgOpCode: // 0xf96f7324
		var res ElectorRecoverStakeResponseMsgBody
		if err := tlb.Unmarshal(cell, &res); err != nil {
			return ElectorRecoverStakeResponseMsgOp, nil, err
		}
		return ElectorRecoverStakeResponseMsgOp, res, nil
	}
	return "", nil, fmt.Errorf("invalid message tag")
}

// MsgOpName is a human-friendly name for a message's operation which is identified by the first 4 bytes of the message's body.
type MsgOpName = string

const (
	TextCommentMsgOp                             MsgOpName = "TextComment"
	ProveOwnershipMsgOp                          MsgOpName = "ProveOwnership"
	NftOwnershipAssignedMsgOp                    MsgOpName = "NftOwnershipAssigned"
	OwnershipProofMsgOp                          MsgOpName = "OwnershipProof"
	ChallengeQuarantinedChannelStateMsgOp        MsgOpName = "ChallengeQuarantinedChannelState"
	TonstakePoolWithdrawalMsgOp                  MsgOpName = "TonstakePoolWithdrawal"
	SbtOwnerInfoMsgOp                            MsgOpName = "SbtOwnerInfo"
	InitPaymentChannelMsgOp                      MsgOpName = "InitPaymentChannel"
	JettonTransferMsgOp                          MsgOpName = "JettonTransfer"
	OfferStorageContractMsgOp                    MsgOpName = "OfferStorageContract"
	TonstakeNftInitMsgOp                         MsgOpName = "TonstakeNftInit"
	TonstakeControllerPoolHaltMsgOp              MsgOpName = "TonstakeControllerPoolHalt"
	WhalesNominatorsForceKickMsgOp               MsgOpName = "WhalesNominatorsForceKick"
	TonstakeControllerCreditMsgOp                MsgOpName = "TonstakeControllerCredit"
	JettonInternalTransferMsgOp                  MsgOpName = "JettonInternalTransfer"
	WhalesNominatorsWithdrawUnownedResponseMsgOp MsgOpName = "WhalesNominatorsWithdrawUnownedResponse"
	SbtDestroyMsgOp                              MsgOpName = "SbtDestroy"
	StartUncooperativeChannelCloseMsgOp          MsgOpName = "StartUncooperativeChannelClose"
	WhalesNominatorsStakeWithdrawCompletedMsgOp  MsgOpName = "WhalesNominatorsStakeWithdrawCompleted"
	WhalesNominatorsWithdrawUnownedMsgOp         MsgOpName = "WhalesNominatorsWithdrawUnowned"
	FinishUncooperativeChannelCloseMsgOp         MsgOpName = "FinishUncooperativeChannelClose"
	TonstakeControllerPoolSendMessageMsgOp       MsgOpName = "TonstakeControllerPoolSendMessage"
	TeleitemDeployMsgOp                          MsgOpName = "TeleitemDeploy"
	TonstakePoolSetGovernanceFeeMsgOp            MsgOpName = "TonstakePoolSetGovernanceFee"
	GetStaticDataMsgOp                           MsgOpName = "GetStaticData"
	TonstakeControllerValidatorWithdrawalMsgOp   MsgOpName = "TonstakeControllerValidatorWithdrawal"
	TonstakePoolWithdrawMsgOp                    MsgOpName = "TonstakePoolWithdraw"
	TeleitemCancelAuctionMsgOp                   MsgOpName = "TeleitemCancelAuction"
	ProofStorageMsgOp                            MsgOpName = "ProofStorage"
	TelemintDeployMsgOp                          MsgOpName = "TelemintDeploy"
	TelemintDeployV2MsgOp                        MsgOpName = "TelemintDeployV2"
	StorageWithdrawMsgOp                         MsgOpName = "StorageWithdraw"
	ElectorRecoverStakeRequestMsgOp              MsgOpName = "ElectorRecoverStakeRequest"
	TonstakePoolDepositMsgOp                     MsgOpName = "TonstakePoolDeposit"
	TeleitemStartAuctionMsgOp                    MsgOpName = "TeleitemStartAuction"
	TonstakePoolTouchMsgOp                       MsgOpName = "TonstakePoolTouch"
	ElectorNewStakeMsgOp                         MsgOpName = "ElectorNewStake"
	UpdatePubkeyMsgOp                            MsgOpName = "UpdatePubkey"
	UpdateStorageParamsMsgOp                     MsgOpName = "UpdateStorageParams"
	TonstakeImanagerOperationFeeMsgOp            MsgOpName = "TonstakeImanagerOperationFee"
	ChannelCooperativeCloseMsgOp                 MsgOpName = "ChannelCooperativeClose"
	TonstakeControllerReturnAvailableFundsMsgOp  MsgOpName = "TonstakeControllerReturnAvailableFunds"
	JettonBurnMsgOp                              MsgOpName = "JettonBurn"
	TonstakePoolSetRolesMsgOp                    MsgOpName = "TonstakePoolSetRoles"
	NftTransferMsgOp                             MsgOpName = "NftTransfer"
	TonstakeControllerSendRequestLoanMsgOp       MsgOpName = "TonstakeControllerSendRequestLoan"
	WalletPluginDestructMsgOp                    MsgOpName = "WalletPluginDestruct"
	SettleChannelConditionalsMsgOp               MsgOpName = "SettleChannelConditionals"
	TopUpChannelBalanceMsgOp                     MsgOpName = "TopUpChannelBalance"
	GetRoyaltyParamsMsgOp                        MsgOpName = "GetRoyaltyParams"
	SbtRevokeMsgOp                               MsgOpName = "SbtRevoke"
	PaymentRequestMsgOp                          MsgOpName = "PaymentRequest"
	TonstakeControllerPoolUnhaltMsgOp            MsgOpName = "TonstakeControllerPoolUnhalt"
	JettonNotifyMsgOp                            MsgOpName = "JettonNotify"
	SubscriptionPaymentMsgOp                     MsgOpName = "SubscriptionPayment"
	WhalesNominatorsStakeWithdrawDelayedMsgOp    MsgOpName = "WhalesNominatorsStakeWithdrawDelayed"
	ChannelCooperativeCommitMsgOp                MsgOpName = "ChannelCooperativeCommit"
	TonstakeControllerPoolSetSudoerMsgOp         MsgOpName = "TonstakeControllerPoolSetSudoer"
	CloseStorageContractMsgOp                    MsgOpName = "CloseStorageContract"
	AcceptStorageContractMsgOp                   MsgOpName = "AcceptStorageContract"
	TonstakeControllerApproveMsgOp               MsgOpName = "TonstakeControllerApprove"
	WhalesNominatorsDepositMsgOp                 MsgOpName = "WhalesNominatorsDeposit"
	ReportStaticDataMsgOp                        MsgOpName = "ReportStaticData"
	TonstakeControllerWithdrawValidatorMsgOp     MsgOpName = "TonstakeControllerWithdrawValidator"
	TonstakeControllerPoolUpgradeMsgOp           MsgOpName = "TonstakeControllerPoolUpgrade"
	TonstakePoolPrepareGovernanceMigrationMsgOp  MsgOpName = "TonstakePoolPrepareGovernanceMigration"
	WhalesNominatorsAcceptStakeMsgOp             MsgOpName = "WhalesNominatorsAcceptStake"
	TonstakePoolSetDepositSettingsMsgOp          MsgOpName = "TonstakePoolSetDepositSettings"
	WhalesNominatorsAcceptWithdrawsMsgOp         MsgOpName = "WhalesNominatorsAcceptWithdraws"
	WhalesNominatorsSendStakeMsgOp               MsgOpName = "WhalesNominatorsSendStake"
	ReportRoyaltyParamsMsgOp                     MsgOpName = "ReportRoyaltyParams"
	StorageRewardWithdrawalMsgOp                 MsgOpName = "StorageRewardWithdrawal"
	TonstakeImanagerRequestNotificationMsgOp     MsgOpName = "TonstakeImanagerRequestNotification"
	TonstakePoolDeployControllerMsgOp            MsgOpName = "TonstakePoolDeployController"
	StorageContractTerminatedMsgOp               MsgOpName = "StorageContractTerminated"
	TonstakeImanagerStatsMsgOp                   MsgOpName = "TonstakeImanagerStats"
	TonstakeImanagerSetInterestMsgOp             MsgOpName = "TonstakeImanagerSetInterest"
	SbtRequestOwnerMsgOp                         MsgOpName = "SbtRequestOwner"
	TonstakeControllerTopUpMsgOp                 MsgOpName = "TonstakeControllerTopUp"
	StorageContractConfirmedMsgOp                MsgOpName = "StorageContractConfirmed"
	ExcessMsgOp                                  MsgOpName = "Excess"
	WhalesNominatorsWithdrawMsgOp                MsgOpName = "WhalesNominatorsWithdraw"
	ChannelClosedMsgOp                           MsgOpName = "ChannelClosed"
	TonstakePoolLoanRepaymentMsgOp               MsgOpName = "TonstakePoolLoanRepayment"
	WalletPluginDestructResponseMsgOp            MsgOpName = "WalletPluginDestructResponse"
	DeployStorageContractMsgOp                   MsgOpName = "DeployStorageContract"
	TonstakePoolRequestLoanMsgOp                 MsgOpName = "TonstakePoolRequestLoan"
	TonstakeControllerDisapproveMsgOp            MsgOpName = "TonstakeControllerDisapprove"
	TonstakeControllerRecoverStakeMsgOp          MsgOpName = "TonstakeControllerRecoverStake"
	TonstakeNftBurnNotificationMsgOp             MsgOpName = "TonstakeNftBurnNotification"
	TonstakeControllerReturnUnusedLoanMsgOp      MsgOpName = "TonstakeControllerReturnUnusedLoan"
	PaymentRequestResponseMsgOp                  MsgOpName = "PaymentRequestResponse"
	TonstakeControllerUpdateValidatorHashMsgOp   MsgOpName = "TonstakeControllerUpdateValidatorHash"
	TonstakeNftBurnMsgOp                         MsgOpName = "TonstakeNftBurn"
	ElectorNewStakeConfirmationMsgOp             MsgOpName = "ElectorNewStakeConfirmation"
	ElectorRecoverStakeResponseMsgOp             MsgOpName = "ElectorRecoverStakeResponse"
)

// MsgOpCode is the first 4 bytes of a message body identifying an operation to be performed.
type MsgOpCode = uint32

const (
	TextCommentMsgOpCode                             MsgOpCode = 0x0
	ProveOwnershipMsgOpCode                          MsgOpCode = 0x4ded148
	NftOwnershipAssignedMsgOpCode                    MsgOpCode = 0x5138d91
	OwnershipProofMsgOpCode                          MsgOpCode = 0x524c7ae
	ChallengeQuarantinedChannelStateMsgOpCode        MsgOpCode = 0x88eaa32
	TonstakePoolWithdrawalMsgOpCode                  MsgOpCode = 0xa77535c
	SbtOwnerInfoMsgOpCode                            MsgOpCode = 0xdd607e3
	InitPaymentChannelMsgOpCode                      MsgOpCode = 0xe0620c2
	JettonTransferMsgOpCode                          MsgOpCode = 0xf8a7ea5
	OfferStorageContractMsgOpCode                    MsgOpCode = 0x107c49ef
	TonstakeNftInitMsgOpCode                         MsgOpCode = 0x132f9a45
	TonstakeControllerPoolHaltMsgOpCode              MsgOpCode = 0x139a1b4e
	WhalesNominatorsForceKickMsgOpCode               MsgOpCode = 0x1596920c
	TonstakeControllerCreditMsgOpCode                MsgOpCode = 0x1690c604
	JettonInternalTransferMsgOpCode                  MsgOpCode = 0x178d4519
	WhalesNominatorsWithdrawUnownedResponseMsgOpCode MsgOpCode = 0x1d1715bf
	SbtDestroyMsgOpCode                              MsgOpCode = 0x1f04537a
	StartUncooperativeChannelCloseMsgOpCode          MsgOpCode = 0x1f151acf
	WhalesNominatorsStakeWithdrawCompletedMsgOpCode  MsgOpCode = 0x23d421e1
	WhalesNominatorsWithdrawUnownedMsgOpCode         MsgOpCode = 0x251d6a98
	FinishUncooperativeChannelCloseMsgOpCode         MsgOpCode = 0x25432a91
	TonstakeControllerPoolSendMessageMsgOpCode       MsgOpCode = 0x270695fb
	TeleitemDeployMsgOpCode                          MsgOpCode = 0x299a3e15
	TonstakePoolSetGovernanceFeeMsgOpCode            MsgOpCode = 0x2aaa96a0
	GetStaticDataMsgOpCode                           MsgOpCode = 0x2fcb26a2
	TonstakeControllerValidatorWithdrawalMsgOpCode   MsgOpCode = 0x30026327
	TonstakePoolWithdrawMsgOpCode                    MsgOpCode = 0x319b0cdc
	TeleitemCancelAuctionMsgOpCode                   MsgOpCode = 0x371638ae
	ProofStorageMsgOpCode                            MsgOpCode = 0x419d5d4d
	TelemintDeployMsgOpCode                          MsgOpCode = 0x4637289a
	TelemintDeployV2MsgOpCode                        MsgOpCode = 0x4637289b
	StorageWithdrawMsgOpCode                         MsgOpCode = 0x46ed2e94
	ElectorRecoverStakeRequestMsgOpCode              MsgOpCode = 0x47657424
	TonstakePoolDepositMsgOpCode                     MsgOpCode = 0x47d54391
	TeleitemStartAuctionMsgOpCode                    MsgOpCode = 0x487a8e81
	TonstakePoolTouchMsgOpCode                       MsgOpCode = 0x4bc7c2df
	ElectorNewStakeMsgOpCode                         MsgOpCode = 0x4e73744b
	UpdatePubkeyMsgOpCode                            MsgOpCode = 0x53f34cd6
	UpdateStorageParamsMsgOpCode                     MsgOpCode = 0x54cbf19b
	TonstakeImanagerOperationFeeMsgOpCode            MsgOpCode = 0x54d37487
	ChannelCooperativeCloseMsgOpCode                 MsgOpCode = 0x5577587e
	TonstakeControllerReturnAvailableFundsMsgOpCode  MsgOpCode = 0x55c26cd5
	JettonBurnMsgOpCode                              MsgOpCode = 0x595f07bc
	TonstakePoolSetRolesMsgOpCode                    MsgOpCode = 0x5e517f36
	NftTransferMsgOpCode                             MsgOpCode = 0x5fcc3d14
	TonstakeControllerSendRequestLoanMsgOpCode       MsgOpCode = 0x6335b11a
	WalletPluginDestructMsgOpCode                    MsgOpCode = 0x64737472
	SettleChannelConditionalsMsgOpCode               MsgOpCode = 0x66f6f069
	TopUpChannelBalanceMsgOpCode                     MsgOpCode = 0x67c7d281
	GetRoyaltyParamsMsgOpCode                        MsgOpCode = 0x693d3950
	SbtRevokeMsgOpCode                               MsgOpCode = 0x6f89f5e3
	PaymentRequestMsgOpCode                          MsgOpCode = 0x706c7567
	TonstakeControllerPoolUnhaltMsgOpCode            MsgOpCode = 0x7247e7a5
	JettonNotifyMsgOpCode                            MsgOpCode = 0x7362d09c
	SubscriptionPaymentMsgOpCode                     MsgOpCode = 0x73756273
	WhalesNominatorsStakeWithdrawDelayedMsgOpCode    MsgOpCode = 0x74bb3427
	ChannelCooperativeCommitMsgOpCode                MsgOpCode = 0x79a126ef
	TonstakeControllerPoolSetSudoerMsgOpCode         MsgOpCode = 0x79e7c016
	CloseStorageContractMsgOpCode                    MsgOpCode = 0x79f937ea
	AcceptStorageContractMsgOpCode                   MsgOpCode = 0x7a361688
	TonstakeControllerApproveMsgOpCode               MsgOpCode = 0x7b4b42e6
	WhalesNominatorsDepositMsgOpCode                 MsgOpCode = 0x7bcd1fef
	ReportStaticDataMsgOpCode                        MsgOpCode = 0x8b771735
	TonstakeControllerWithdrawValidatorMsgOpCode     MsgOpCode = 0x8efed779
	TonstakeControllerPoolUpgradeMsgOpCode           MsgOpCode = 0x96e7f528
	TonstakePoolPrepareGovernanceMigrationMsgOpCode  MsgOpCode = 0x9971881c
	WhalesNominatorsAcceptStakeMsgOpCode             MsgOpCode = 0x99a811fb
	TonstakePoolSetDepositSettingsMsgOpCode          MsgOpCode = 0x9bf5561c
	WhalesNominatorsAcceptWithdrawsMsgOpCode         MsgOpCode = 0xa19fd934
	WhalesNominatorsSendStakeMsgOpCode               MsgOpCode = 0xa2065f2c
	ReportRoyaltyParamsMsgOpCode                     MsgOpCode = 0xa8cb00ad
	StorageRewardWithdrawalMsgOpCode                 MsgOpCode = 0xa91baf56
	TonstakeImanagerRequestNotificationMsgOpCode     MsgOpCode = 0xb1ebae06
	TonstakePoolDeployControllerMsgOpCode            MsgOpCode = 0xb27edcad
	StorageContractTerminatedMsgOpCode               MsgOpCode = 0xb6236d63
	TonstakeImanagerStatsMsgOpCode                   MsgOpCode = 0xc1344900
	TonstakeImanagerSetInterestMsgOpCode             MsgOpCode = 0xc9f04485
	SbtRequestOwnerMsgOpCode                         MsgOpCode = 0xd0c3bfea
	TonstakeControllerTopUpMsgOpCode                 MsgOpCode = 0xd372158c
	StorageContractConfirmedMsgOpCode                MsgOpCode = 0xd4caedcd
	ExcessMsgOpCode                                  MsgOpCode = 0xd53276db
	WhalesNominatorsWithdrawMsgOpCode                MsgOpCode = 0xda803efd
	ChannelClosedMsgOpCode                           MsgOpCode = 0xdddc88ba
	TonstakePoolLoanRepaymentMsgOpCode               MsgOpCode = 0xdfdca27b
	WalletPluginDestructResponseMsgOpCode            MsgOpCode = 0xe4737472
	DeployStorageContractMsgOpCode                   MsgOpCode = 0xe4748df1
	TonstakePoolRequestLoanMsgOpCode                 MsgOpCode = 0xe642c965
	TonstakeControllerDisapproveMsgOpCode            MsgOpCode = 0xe8a0abfe
	TonstakeControllerRecoverStakeMsgOpCode          MsgOpCode = 0xeb373a05
	TonstakeNftBurnNotificationMsgOpCode             MsgOpCode = 0xed58b0b2
	TonstakeControllerReturnUnusedLoanMsgOpCode      MsgOpCode = 0xed7378a6
	PaymentRequestResponseMsgOpCode                  MsgOpCode = 0xf06c7567
	TonstakeControllerUpdateValidatorHashMsgOpCode   MsgOpCode = 0xf0fd2250
	TonstakeNftBurnMsgOpCode                         MsgOpCode = 0xf127fe4e
	ElectorNewStakeConfirmationMsgOpCode             MsgOpCode = 0xf374484c
	ElectorRecoverStakeResponseMsgOpCode             MsgOpCode = 0xf96f7324
)

var KnownMsgTypes = map[string]any{
	TextCommentMsgOp:                             TextCommentMsgBody{},
	ProveOwnershipMsgOp:                          ProveOwnershipMsgBody{},
	NftOwnershipAssignedMsgOp:                    NftOwnershipAssignedMsgBody{},
	OwnershipProofMsgOp:                          OwnershipProofMsgBody{},
	ChallengeQuarantinedChannelStateMsgOp:        ChallengeQuarantinedChannelStateMsgBody{},
	TonstakePoolWithdrawalMsgOp:                  TonstakePoolWithdrawalMsgBody{},
	SbtOwnerInfoMsgOp:                            SbtOwnerInfoMsgBody{},
	InitPaymentChannelMsgOp:                      InitPaymentChannelMsgBody{},
	JettonTransferMsgOp:                          JettonTransferMsgBody{},
	OfferStorageContractMsgOp:                    OfferStorageContractMsgBody{},
	TonstakeNftInitMsgOp:                         TonstakeNftInitMsgBody{},
	TonstakeControllerPoolHaltMsgOp:              TonstakeControllerPoolHaltMsgBody{},
	WhalesNominatorsForceKickMsgOp:               WhalesNominatorsForceKickMsgBody{},
	TonstakeControllerCreditMsgOp:                TonstakeControllerCreditMsgBody{},
	JettonInternalTransferMsgOp:                  JettonInternalTransferMsgBody{},
	WhalesNominatorsWithdrawUnownedResponseMsgOp: WhalesNominatorsWithdrawUnownedResponseMsgBody{},
	SbtDestroyMsgOp:                              SbtDestroyMsgBody{},
	StartUncooperativeChannelCloseMsgOp:          StartUncooperativeChannelCloseMsgBody{},
	WhalesNominatorsStakeWithdrawCompletedMsgOp:  WhalesNominatorsStakeWithdrawCompletedMsgBody{},
	WhalesNominatorsWithdrawUnownedMsgOp:         WhalesNominatorsWithdrawUnownedMsgBody{},
	FinishUncooperativeChannelCloseMsgOp:         FinishUncooperativeChannelCloseMsgBody{},
	TonstakeControllerPoolSendMessageMsgOp:       TonstakeControllerPoolSendMessageMsgBody{},
	TeleitemDeployMsgOp:                          TeleitemDeployMsgBody{},
	TonstakePoolSetGovernanceFeeMsgOp:            TonstakePoolSetGovernanceFeeMsgBody{},
	GetStaticDataMsgOp:                           GetStaticDataMsgBody{},
	TonstakeControllerValidatorWithdrawalMsgOp:   TonstakeControllerValidatorWithdrawalMsgBody{},
	TonstakePoolWithdrawMsgOp:                    TonstakePoolWithdrawMsgBody{},
	TeleitemCancelAuctionMsgOp:                   TeleitemCancelAuctionMsgBody{},
	ProofStorageMsgOp:                            ProofStorageMsgBody{},
	TelemintDeployMsgOp:                          TelemintDeployMsgBody{},
	TelemintDeployV2MsgOp:                        TelemintDeployV2MsgBody{},
	StorageWithdrawMsgOp:                         StorageWithdrawMsgBody{},
	ElectorRecoverStakeRequestMsgOp:              ElectorRecoverStakeRequestMsgBody{},
	TonstakePoolDepositMsgOp:                     TonstakePoolDepositMsgBody{},
	TeleitemStartAuctionMsgOp:                    TeleitemStartAuctionMsgBody{},
	TonstakePoolTouchMsgOp:                       TonstakePoolTouchMsgBody{},
	ElectorNewStakeMsgOp:                         ElectorNewStakeMsgBody{},
	UpdatePubkeyMsgOp:                            UpdatePubkeyMsgBody{},
	UpdateStorageParamsMsgOp:                     UpdateStorageParamsMsgBody{},
	TonstakeImanagerOperationFeeMsgOp:            TonstakeImanagerOperationFeeMsgBody{},
	ChannelCooperativeCloseMsgOp:                 ChannelCooperativeCloseMsgBody{},
	TonstakeControllerReturnAvailableFundsMsgOp:  TonstakeControllerReturnAvailableFundsMsgBody{},
	JettonBurnMsgOp:                              JettonBurnMsgBody{},
	TonstakePoolSetRolesMsgOp:                    TonstakePoolSetRolesMsgBody{},
	NftTransferMsgOp:                             NftTransferMsgBody{},
	TonstakeControllerSendRequestLoanMsgOp:       TonstakeControllerSendRequestLoanMsgBody{},
	WalletPluginDestructMsgOp:                    WalletPluginDestructMsgBody{},
	SettleChannelConditionalsMsgOp:               SettleChannelConditionalsMsgBody{},
	TopUpChannelBalanceMsgOp:                     TopUpChannelBalanceMsgBody{},
	GetRoyaltyParamsMsgOp:                        GetRoyaltyParamsMsgBody{},
	SbtRevokeMsgOp:                               SbtRevokeMsgBody{},
	PaymentRequestMsgOp:                          PaymentRequestMsgBody{},
	TonstakeControllerPoolUnhaltMsgOp:            TonstakeControllerPoolUnhaltMsgBody{},
	JettonNotifyMsgOp:                            JettonNotifyMsgBody{},
	SubscriptionPaymentMsgOp:                     SubscriptionPaymentMsgBody{},
	WhalesNominatorsStakeWithdrawDelayedMsgOp:    WhalesNominatorsStakeWithdrawDelayedMsgBody{},
	ChannelCooperativeCommitMsgOp:                ChannelCooperativeCommitMsgBody{},
	TonstakeControllerPoolSetSudoerMsgOp:         TonstakeControllerPoolSetSudoerMsgBody{},
	CloseStorageContractMsgOp:                    CloseStorageContractMsgBody{},
	AcceptStorageContractMsgOp:                   AcceptStorageContractMsgBody{},
	TonstakeControllerApproveMsgOp:               TonstakeControllerApproveMsgBody{},
	WhalesNominatorsDepositMsgOp:                 WhalesNominatorsDepositMsgBody{},
	ReportStaticDataMsgOp:                        ReportStaticDataMsgBody{},
	TonstakeControllerWithdrawValidatorMsgOp:     TonstakeControllerWithdrawValidatorMsgBody{},
	TonstakeControllerPoolUpgradeMsgOp:           TonstakeControllerPoolUpgradeMsgBody{},
	TonstakePoolPrepareGovernanceMigrationMsgOp:  TonstakePoolPrepareGovernanceMigrationMsgBody{},
	WhalesNominatorsAcceptStakeMsgOp:             WhalesNominatorsAcceptStakeMsgBody{},
	TonstakePoolSetDepositSettingsMsgOp:          TonstakePoolSetDepositSettingsMsgBody{},
	WhalesNominatorsAcceptWithdrawsMsgOp:         WhalesNominatorsAcceptWithdrawsMsgBody{},
	WhalesNominatorsSendStakeMsgOp:               WhalesNominatorsSendStakeMsgBody{},
	ReportRoyaltyParamsMsgOp:                     ReportRoyaltyParamsMsgBody{},
	StorageRewardWithdrawalMsgOp:                 StorageRewardWithdrawalMsgBody{},
	TonstakeImanagerRequestNotificationMsgOp:     TonstakeImanagerRequestNotificationMsgBody{},
	TonstakePoolDeployControllerMsgOp:            TonstakePoolDeployControllerMsgBody{},
	StorageContractTerminatedMsgOp:               StorageContractTerminatedMsgBody{},
	TonstakeImanagerStatsMsgOp:                   TonstakeImanagerStatsMsgBody{},
	TonstakeImanagerSetInterestMsgOp:             TonstakeImanagerSetInterestMsgBody{},
	SbtRequestOwnerMsgOp:                         SbtRequestOwnerMsgBody{},
	TonstakeControllerTopUpMsgOp:                 TonstakeControllerTopUpMsgBody{},
	StorageContractConfirmedMsgOp:                StorageContractConfirmedMsgBody{},
	ExcessMsgOp:                                  ExcessMsgBody{},
	WhalesNominatorsWithdrawMsgOp:                WhalesNominatorsWithdrawMsgBody{},
	ChannelClosedMsgOp:                           ChannelClosedMsgBody{},
	TonstakePoolLoanRepaymentMsgOp:               TonstakePoolLoanRepaymentMsgBody{},
	WalletPluginDestructResponseMsgOp:            WalletPluginDestructResponseMsgBody{},
	DeployStorageContractMsgOp:                   DeployStorageContractMsgBody{},
	TonstakePoolRequestLoanMsgOp:                 TonstakePoolRequestLoanMsgBody{},
	TonstakeControllerDisapproveMsgOp:            TonstakeControllerDisapproveMsgBody{},
	TonstakeControllerRecoverStakeMsgOp:          TonstakeControllerRecoverStakeMsgBody{},
	TonstakeNftBurnNotificationMsgOp:             TonstakeNftBurnNotificationMsgBody{},
	TonstakeControllerReturnUnusedLoanMsgOp:      TonstakeControllerReturnUnusedLoanMsgBody{},
	PaymentRequestResponseMsgOp:                  PaymentRequestResponseMsgBody{},
	TonstakeControllerUpdateValidatorHashMsgOp:   TonstakeControllerUpdateValidatorHashMsgBody{},
	TonstakeNftBurnMsgOp:                         TonstakeNftBurnMsgBody{},
	ElectorNewStakeConfirmationMsgOp:             ElectorNewStakeConfirmationMsgBody{},
	ElectorRecoverStakeResponseMsgOp:             ElectorRecoverStakeResponseMsgBody{},
}

