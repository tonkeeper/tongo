<abi>
    <types interface="payment_channel">
        cp#_ amount:Coins condition:Cell = ConditionalPayment;
        sc_body#_ seqno:uint64 sent:Coins conditionals:(HashmapE 32 ConditionalPayment)
        = SemiChannelBody; // 64+132+1 = 197
        semichannel_state#43685374 channel_id:uint128 data:SemiChannelBody counterparty_data:(Maybe ^SemiChannelBody)
        = SemiChannel; // 32 + 128 + 197 + 1 = 358
        signed_schs#_ signature:bits512 state:SemiChannel = SignedSemiChannel; // 512 + 358 = 870
        quarantined_state#_ state_A:SemiChannelBody state_B:SemiChannelBody
        quarantine_starts:uint32
        state_commited_by_A:Bool
        = QuarantinedState; // 358 + 358 + 32 + 1 = 749
        conf#_ quarantin_duration:uint32
        misbehavior_fine:Coins
        conditional_close_duration:uint32 = ClosingConfig; // 32 + 132 + 132 + 32 = 296
        payment_conf#_ excess_fee:Coins
        dest_A:MsgAddress
        dest_B:MsgAddress = PaymentConfig;
        channel_state#_ balance_A:Coins balance_B:Coins
        key_A:uint256 key_B:uint256
        channel_id:uint128
        config:^ClosingConfig
        commited_seqno_A:uint32 commited_seqno_B:uint32
        quarantin:(Maybe ^QuarantinedState)
        payments:^PaymentConfig = Storage;
        // 132 + 132 + 256 + 256 + 32 + 32 + 1 + 132 = 973
    </types>
    <types interface="storage_provider">
        torrent_info piece_size:uint32 file_size:uint64 root_hash:(## 256) header_size:uint64 header_hash:(## 256)
        microchunk_hash:(Maybe (## 256)) description:Text = TorrentInfo;
    </types>
    <types interface="telemint">
        nft_royalty_params$_ numerator:uint16 denominator:uint16 destination:MsgAddress = NftRoyaltyParams;
        teleitem_auction_config$_ beneficiar_address:MsgAddress initial_min_bid:Grams max_bid:Grams min_bid_step:uint8
        min_extend_time:uint32 duration:uint32 = TeleitemAuctionConfig;
        telemint_data$_ touched:Bool subwallet_id:uint32 public_key:bits256 collection_content:^Cell nft_item_code:^Cell
        royalty_params:^NftRoyaltyParams = TelemintData;
        telemint_unsigned_deploy$_ subwallet_id:uint32 valid_since:uint32 valid_till:uint32 username:FixedLengthText
        content:^Cell auction_config:^TeleitemAuctionConfig royalty_params:(Maybe ^NftRoyaltyParams) =
        TelemintUnsignedDeploy;
        telemint_restrictions$_ force_sender_address:(Maybe MsgAddress) rewrite_sender_address:(Maybe MsgAddress) =
        TelemintRestrictions;
        telemint_unsigned_deploy_v2$_ subwallet_id:uint32 valid_since:uint32 valid_till:uint32
        token_name:FixedLengthText
        content:^Cell auction_config:^TeleitemAuctionConfig royalty_params:(Maybe ^NftRoyaltyParams) restrictions:(Maybe
        ^TelemintRestrictions) = TelemintUnsignedDeployV2;
    </types>
    <!--    Balance            tlb.Grams-->
    <!--    PendingWithdraw    tlb.Grams-->
    <!--    PendingWithdrawAll bool-->
    <!--    PendingDeposit     tlb.Grams-->
    <!--    MemberWithdraw     tlb.Grams-->
    <types interface="whales_nominators">
        whales_nominators_member#_ profit_per_coin:int128 balance:Grams pending_withdraw:Grams pending_withdraw_all:Bool
        pending_deposit:Grams member_withdraw:Grams= WhalesNominatorsMember;
        whales_nominators_members_list#_ list:(Hashmap 256 WhalesNominatorsMember)= WhalesNominatorsMembersList;
    </types>
    <types interface="tf_nominators">
        account_lists#_ list:(Hashmap 256 Cell) = AccountLists;
    </types>
    <!--        Wallets      -->
    <get_method name="seqno" interface="wallet" interface="storage_provider">
        <output>
            <int name="state">uint32</int>
        </output>
    </get_method>
    <get_method name="get_public_key" interface="wallet" interface="storage_provider">
        <output>
            <int name="public_key">int257</int>
        </output>
    </get_method>
    <get_method name="get_subwallet_id" interface="wallet_v4r2">
        <output>
            <int name="subwallet_id">uint32</int>
        </output>
    </get_method>
    <get_method name="get_plugin_list" interface="wallet_v4r2">
        <output>
            <tuple name="plugins" list="true">
                <int name="workchain">int32</int>
                <int name="address">bits256</int>
            </tuple>
        </output>
    </get_method>
    <get_method name="is_plugin_installed" interface="wallet_v4r2">
        <input>
            <tinyint name="workchain">int32</tinyint>
            <int name="addr_hash">int257</int>
        </input>
        <output>
            <int name="success">bool</int>
        </output>
    </get_method>


    <!--        NFTs     -->
    <get_method name="get_nft_data" callback="true" interface="tep62_item">
        <output>
            <int name="init">bool</int>
            <int name="index">int257</int>
            <slice name="collection_address">msgaddress</slice>
            <slice name="owner_address">msgaddress</slice>
            <cell name="individual_content">any</cell>
        </output>
    </get_method>
    <get_method name="get_nft_content" interface="tep62">
        <input>
            <int name="index">int257</int>
            <cell name="individual_content">any</cell>
        </input>
        <output>
            <cell name="content">FullContent</cell>
        </output>
    </get_method>
    <get_method name="get_collection_data" interface="tep62_collection">
        <output>
            <int name="next_item_index">int257</int>
            <cell name="collection_content">any</cell>
            <slice name="owner_address">msgaddress</slice>
        </output>
    </get_method>
    <get_method name="get_nft_address_by_index" interface="tep62_collection">
        <input>
            <int name="index">int257</int>
        </input>
        <output>
            <slice name="address">msgaddress</slice>
        </output>
    </get_method>
    <get_method name="royalty_params" interface="tep66">
        <output>
            <int name="numerator">uint16</int>
            <int name="denominator">uint16</int>
            <slice name="destination">msgaddress</slice>
        </output>
    </get_method>
    <get_method name="get_editor" interface="nft_editable">
        <output>
            <slice name="editor">msgaddress</slice>
        </output>
    </get_method>
    <get_method name="get_auction_info" interface="auction">
        <output>
            <slice name="max_bid_address">msgaddress</slice>
            <int name="max_bid_amount">uint64</int>
            <int name="auction_end_time ">uint64</int>
        </output>
    </get_method>

    <!--    Subscriptions-->
    <get_method name="get_subscription_data" interface="subscription">
        <output>
            <tuple name="wallet">
                <int name="workchain">uint32</int>
                <int name="address">bits256</int>
            </tuple>
            <tuple name="beneficiary">
                <int name="workchain">uint32</int>
                <int name="address">bits256</int>
            </tuple>
            <int name="amount">uint64</int>
            <int name="period">uint64</int>
            <int name="start_time">uint64</int>
            <int name="timeout">uint64</int>
            <int name="last_payment_time">uint64</int>
            <int name="last_request_time">uint64</int>
            <int name="failed_attempts">uint32</int>
            <int name="subscription_id">uint64</int>
        </output>
    </get_method>

    <!--        Jettons    -->
    <get_method name="get_jetton_data" interface="tep74">
        <output>
            <int name="total_supply">int257</int>
            <int name="mintable">int8</int>
            <slice name="admin_address">msgaddress</slice>
            <cell name="jetton_content">any</cell>
            <cell name="jetton_wallet_code">any</cell>
        </output>
    </get_method>
    <get_method name="get_wallet_address" interface="tep74">
        <input>
            <slice name="owner_address">msgaddress</slice>
        </input>
        <output>
            <slice name="jetton_wallet_address">msgaddress</slice>
        </output>
    </get_method>
    <get_method name="get_wallet_data" interface="tep74">
        <output>
            <int name="balance">int257</int>
            <slice name="owner">msgaddress</slice>
            <slice name="jetton">msgaddress</slice>
            <cell name="jetton_wallet_code">any</cell>
        </output>
    </get_method>

    <!--        DNS      -->
    <get_method name="dnsresolve" interface="tep81">
        <input>
            <slice name="domain">[]byte</slice>
            <int name="category">int257</int>
        </input>
        <output version="records" fixed_length="true">
            <int name="resolved_bits">int64</int>
            <cell name="result">DNS_RecordSet</cell>
        </output>
    </get_method>
    <get_method name="get_last_fill_up_time" interface="domain">
        <output  fixed_length="true">
            <int name="last_fill_up_time">int64</int>
        </output>
    </get_method>
    <get_method name="get_domain" interface="domain">
        <output>
            <slice name="domain">string</slice>
        </output>
    </get_method>
    <get_method name="get_full_domain" interface="domain">
        <output>
            <slice name="domain">string</slice>
        </output>
    </get_method>

    <!--        NFT sale      -->
    <get_method name="get_sale_data">
        <output version="basic" fixed_length="true" interface="nft_sale">
            <slice name="marketplace">msgaddress</slice>
            <slice name="nft">msgaddress</slice>
            <slice name="owner">msgaddress</slice>
            <int name="full_price">int257</int>
            <int name="market_fee">uint64</int>
            <slice name="royalty_address">msgaddress</slice>
            <int name="royalty_amount">uint64</int>
        </output>

        <output version="getgems" fixed_length="true" interface="nft_sale_getgems">
            <int name="magic" required_value="0x46495850">uint64</int>
            <int name="is_complete">bool</int>
            <int name="created_at">uint64</int>
            <slice name="marketplace">msgaddress</slice>
            <slice name="nft">msgaddress</slice>
            <slice name="owner">msgaddress</slice>
            <int name="full_price">int257</int>
            <slice name="market_fee_address">msgaddress</slice>
            <int name="market_fee">uint64</int>
            <slice name="royalty_address">msgaddress</slice>
            <int name="royalty_amount">uint64</int>
        </output>

        <output version="getgems_auction" fixed_length="true" interface="nft_sale_getgems">
            <int name="magic" required_value="0x415543">uint64</int>
            <int name="end">bool</int>
            <int name="end_time">uint32</int>
            <slice name="marketplace">msgaddress</slice>
            <slice name="nft">msgaddress</slice>
            <slice name="owner">msgaddress</slice>
            <int name="last_bid">uint64</int>
            <slice name="last_member">msgaddress</slice>
            <int name="min_step">uint64</int>
            <slice name="market_fee_address">msgaddress</slice>
            <int name="mp_fee_factor">uint32</int>
            <int name="mp_fee_base">uint32</int>
            <slice name="royalty_address">msgaddress</slice>
            <int name="royalty_fee_factor">uint32</int>
            <int name="royalty_fee_base">uint32</int>
            <int name="max_bid">uint64</int>
            <int name="min_bid">uint64</int>
            <int name="created_at">uint32</int>
            <int name="last_bid_at">uint32</int>
            <int name="is_canceled">bool</int>
        </output>
    </get_method>

    <!--        SBT    -->
    <get_method name="get_authority_address" interface="tep85">
        <output>
            <slice name="address">msgaddress</slice>
        </output>
    </get_method>
    <get_method name="get_revoked_time" interface="tep85">
        <output>
            <int name="time">uint64</int>
        </output>
    </get_method>

    <!--        Payment channels    -->
    <get_method name="get_channel_state" interface="payment_channel">
        <output>
            <int name="state">uint64</int>
        </output>
    </get_method>

    <!--      Storage    -->
    <get_method name="get_wallet_params" interface="storage_provider">
        <output>
            <int name="seqno">uint32</int>
            <int name="subwallet">uint32</int>
            <int name="public_key">int257</int>
        </output>
    </get_method>
    <get_method name="get_storage_params" interface="storage_provider">
        <output>
            <int name="accept_new_contracts">bool</int>
            <int name="rate_per_mb_day">uint64</int>
            <int name="max_span">uint32</int>
            <int name="minimal_file_size">uint64</int>
            <int name="maximal_file_size">uint64</int>
        </output>
    </get_method>
    <get_method name="get_storage_contract_address" interface="storage_provider">
        <input>
            <int name="merkle_hash">int257</int>
            <tinyint name="file_size">uint64</tinyint>
            <slice name="client">msgaddress</slice>
            <int name="torrent_hash">int257</int>
        </input>
        <output>
            <slice name="storage_contract_address">msgaddress</slice>
        </output>
    </get_method>
    <get_method name="get_storage_contract_data" interface="storage_contract">
        <output>
            <int name="active">bool</int>
            <int name="balance">uint64</int>
            <slice name="provider,">msgaddress</slice>
            <int name="merkle_hash">int257</int>
            <int name="file_size">uint64</int>
            <int name="next_proof">uint64</int>
            <int name="rate_per_mb_day">uint64</int>
            <int name="max_span">uint32</int>
            <int name="last_proof_time">uint32</int>
            <slice name="client">msgaddress</slice>
            <int name="torrent_hash">int257</int>
        </output>
    </get_method>
    <get_method name="get_torrent_hash" interface="storage_contract">
        <output>
            <int name="torrent_hash">int257</int>
        </output>
    </get_method>
    <get_method name="is_active" interface="storage_contract">
        <output>
            <int name="is_active">bool</int>
        </output>
    </get_method>
    <get_method name="get_next_proof_info" interface="storage_contract">
        <output>
            <int name="next_proof">uint64</int>
            <int name="last_proof_time">uint32</int>
            <int name="max_span">uint32</int>
        </output>
    </get_method>

    <!--        Nominators     -->
    <get_method name="list_nominators" interface="tf_nominator">
        <output>
            <tuple name="nominators" list="true">
                <int name="address">bits256</int>
                <int name="amount">uint64</int>
                <int name="pending_deposit_amount">uint64</int>
                <int name="withdraw_requested">bool</int>
            </tuple>
        </output>
    </get_method>
    <get_method name="list_votes" interface="tf_nominator">
        <output>
            <tuple name="votes" list="true">
                <int name="proposal_hash">bits256</int>
                <int name="vote_create_time">uint32</int>
            </tuple>
        </output>
    </get_method>
    <get_method name="get_pool_data" interface="tf_nominator">
        <output version="tf">
            <int name="state">int8</int>
            <int name="nominators_count">uint32</int>
            <int name="stake_amount_sent">int64</int>
            <int name="validator_amount">int64</int>
            <int name="validator_address">bits256</int>
            <int name="validator_reward_share">uint32</int>
            <int name="max_nominators_count">uint32</int>
            <int name="min_validator_stake">int64</int>
            <int name="min_nominator_stake">int64</int>
            <cell name="nominators">any</cell>
            <cell name="withdraw_requests" nullable="true">AccountLists</cell>
            <int name="stake_at">uint32</int>
            <int name="saved_validator_set_hash">bits256</int>
            <int name="validator_set_changes_count">uint32</int>
            <int name="validator_set_change_time">uint32</int>
            <int name="stake_held_for">uint32</int>
            <tuple name="config_proposal_votings" list="true"/>
        </output>
    </get_method>
    <get_method name="get_nominator_data">
        <input>
            <int name="address">int257</int>
        </input>
        <output>
            <int name="amount">uint64</int>
            <int name="pending_deposit_amount">uint64</int>
            <int name="withdraw_found">bool</int>
        </output>
    </get_method>

    <!--    Whales nominators     -->
    <get_method name="get_staking_status" interface="whales_nominators">
        <output fixed_length="true">
            <int name="stake_at">uint32</int>
            <int name="stake_until">uint32</int>
            <int name="stake_sent">uint64</int>
            <int name="query_sent">bool</int>
            <int name="could_unlock">bool</int>
            <int name="locked">bool</int>
            <int name="proxy_stake_lock_final">bool</int>
        </output>
    </get_method>
    <get_method name="get_pool_status" interface="whales_nominators">
        <output fixed_length="true">
            <int name="balance">int64</int>
            <int name="balance_sent">int64</int>
            <int name="balance_pending_deposits">int64</int>
            <int name="balance_pending_withdraw">int64</int>
            <int name="balance_withdraw">int64</int>
        </output>
    </get_method>
    <get_method name="get_member" interface="whales_nominators">
        <input>
            <slice name="member">msgaddress</slice>
        </input>
        <output version="whales_nominator">
            <int name="member_balance">int64</int>
            <int name="member_pending_deposit">int64</int>
            <int name="member_pending_withdraw">int64</int>
            <int name="member_withdraw">int64</int>
        </output>
    </get_method>
    <get_method name="get_members_raw">
        <output version="whales_nominator" interface="whales_nominators" fixed_length="true">
            <cell name="members">WhalesNominatorsMembersList</cell>
        </output>
    </get_method>
    <get_method name="get_params">
        <output version="whales_nominator" interface="whales_nominators" fixed_length="true">
            <int name="enabled">bool</int>
            <int name="updates_enables">bool</int>
            <int name="min_stake">int64</int>
            <int name="deposit_fee">int64</int>
            <int name="withdraw_fee">int64</int>
            <int name="pool_fee">int64</int>
            <int name="receipt_price">int64</int>
        </output>
    </get_method>

    <!--    Telegram     -->
    <get_method name="get_telemint_auction_state" interface="telemint">
        <output fixed_length="true">
            <slice name="bidder">msgaddress</slice>
            <int name="bid">int64</int>
            <int name="bid_ts">int64</int>
            <int name="min_bid">int64</int>
            <int name="end_time">int64</int>
        </output>
    </get_method>
    <get_method name="get_telemint_auction_config" interface="telemint">
        <output fixed_length="true">
            <slice name="beneficiar">msgaddress</slice>
            <int name="initial_min_bid">int64</int>
            <int name="max_bid">int64</int>
            <int name="min_bid_step">int64</int>
            <int name="min_extend_time">int64</int>
            <int name="duration">int64</int>
        </output>
    </get_method>
    <get_method name="get_telemint_token_name" interface="telemint">
        <output fixed_length="true">
            <slice name="beneficiar">text</slice>
        </output>
    </get_method>


    <!--    Text    -->
    <internal name="text_comment">
        text_comment#00000000 text:Text = InternalMsgBody;
    </internal>
    <internal name="excess">
        excesses#d53276db query_id:uint64 = InternalMsgBody;
    </internal>

    <!--        Subscriptions     -->
    <internal name="payment_request" interface="wallet_v4r2">
        request_funds#706c7567 query_id:uint64 amount:CurrencyCollection = InternalMsgBody;
    </internal>
    <internal name="payment_request_response" interface="subscription">
        payment_request_response#f06c7567 = InternalMsgBody;
    </internal>
    <internal name="wallet_plugin_destruct" interface="wallet_v4r2">
        destruct#64737472 = InternalMsgBody;
    </internal>
    <internal name="wallet_plugin_destruct_response" interface="wallet_v4r2">
        destruct_response#e4737472 = InternalMsgBody;
    </internal>
    <internal name="subscription_payment" interface="subscription">
        subscription_payment#73756273 = InternalMsgBody;
    </internal>


    <!--        NFTs       -->
    <internal name="nft_transfer" interface="tep62">
        transfer#5fcc3d14 query_id:uint64 new_owner:MsgAddress response_destination:MsgAddress
        custom_payload:(Maybe ^Cell) forward_amount:(VarUInteger 16) forward_payload:(Either Cell ^Cell) =
        InternalMsgBody;
    </internal>
    <internal name="nft_ownership_assigned" interface="tep62">
        ownership_assigned#05138d91 query_id:uint64 prev_owner:MsgAddress forward_payload:(Either Cell ^Cell) =
        InternalMsgBody;
    </internal>
    <internal name="get_static_data" interface="tep62">
        get_static_data#2fcb26a2 query_id:uint64 = InternalMsgBody;
    </internal>
    <internal name="report_static_data" interface="tep62">
        report_static_data#8b771735 query_id:uint64 index:uint256 collection:MsgAddress = InternalMsgBody;
    </internal>
    <internal name="get_royalty_params" interface="tep66">
        get_royalty_params#693d3950 query_id:uint64 = InternalMsgBody;
    </internal>
    <internal name="report_royalty_params" interface="tep66">
        report_royalty_params#a8cb00ad query_id:uint64 numerator:uint16 denominator:uint16
        destination:MsgAddress = InternalMsgBody;
    </internal>


    <!--        Jettons    -->
    <internal name="jetton_transfer" interface="tep74">

        transfer#0f8a7ea5 query_id:uint64 amount:(VarUInteger 16) destination:MsgAddress
        response_destination:MsgAddress custom_payload:(Maybe ^Cell)
        forward_ton_amount:(VarUInteger 16) forward_payload:(Either Cell ^Cell)
        = InternalMsgBody;
    </internal>
    <internal name="jetton_internal_transfer" interface="tep74">
        internal_transfer#178d4519 query_id:uint64 amount:(VarUInteger 16) from:MsgAddress
        response_address:MsgAddress
        forward_ton_amount:(VarUInteger 16)
        <!--                forward_payload:(Either Cell ^Cell)-->
        = InternalMsgBody;
    </internal>
    <internal name="jetton_burn" interface="tep74">
        burn#595f07bc query_id:uint64 amount:(VarUInteger 16)
        response_destination:MsgAddress custom_payload:(Maybe ^Cell)
        = InternalMsgBody;
    </internal>
    <internal name="jetton_notify" interface="tep74">
        transfer_notification#7362d09c query_id:uint64 amount:(VarUInteger 16)
        sender:MsgAddress forward_payload:(Either Cell ^Cell)
        = InternalMsgBody;
    </internal>

    <!--    SBT     -->
    <internal name="prove_ownership" interface="tep85">
        prove_ownership#04ded148 query_id:uint64 dest:MsgAddress
        forward_payload:^Cell with_content:Bool = InternalMsgBody;
    </internal>
    <internal name="ownership_proof" interface="tep85">
        ownership_proof#0524c7ae query_id:uint64 item_id:uint256 owner:MsgAddress
        data:^Cell revoked_at:uint64 content:(Maybe ^Cell) = InternalMsgBody;
    </internal>
    <internal name="sbt_request_owner" interface="tep85">
        request_owner#d0c3bfea query_id:uint64 dest:MsgAddress
        forward_payload:^Cell with_content:Bool = InternalMsgBody;
    </internal>
    <internal name="sbt_owner_info" interface="tep85">
        owner_info#0dd607e3 query_id:uint64 item_id:uint256 initiator:MsgAddress owner:MsgAddress
        data:^Cell revoked_at:uint64 content:(Maybe ^Cell) = InternalMsgBody;
    </internal>
    <internal name="sbt_destroy" interface="tep85">
        destroy#1f04537a query_id:uint64 = InternalMsgBody;
    </internal>
    <internal name="sbt_revoke" interface="tep85">
        revoke#6f89f5e3 query_id:uint64 = InternalMsgBody;
    </internal>


    <!--        Payment channels     -->
    <internal name="top_up_channel_balance" interface="payment_channel">
        top_up_balance#67c7d281 add_A:Coins add_B:Coins = InternalMsgBody;
    </internal>
    <internal name="init_payment_channel" interface="payment_channel">
        init_channel#0e0620c2 is_A:Bool signature:bits512 tag:# channel_id:uint128 balance_A:Coins
        balance_B:Coins = InternalMsgBody;
    </internal>
    <internal name="channel_cooperative_close" interface="payment_channel">
        cooperative_close#5577587e sig_A:^bits512 sig_B:^bits512 tag:# channel_id:uint128 balance_A:Coins
        balance_B:Coins seqno_A:uint64 seqno_B:uint64 = InternalMsgBody;
    </internal>
    <internal name="channel_cooperative_commit" interface="payment_channel">
        cooperative_commit#79a126ef sig_A:^bits512 sig_B:^bits512 tag:# channel_id:uint128 seqno_A:uint64
        seqno_B:uint64 = InternalMsgBody;
    </internal>
    <internal name="start_uncooperative_channel_close" interface="payment_channel">
        start_uncooperative_close#1f151acf signed_by_A:Bool signature:bits512 tag:# channel_id:uint128
        sch_A:^SignedSemiChannel
        sch_B:^SignedSemiChannel = InternalMsgBody;
    </internal>
    <internal name="challenge_quarantined_channel_state" interface="payment_channel">
        challenge_quarantined_state#088eaa32
        challenged_by_A:Bool signature:bits512 tag:# channel_id:uint128
        sch_A:^SignedSemiChannel
        sch_B:^SignedSemiChannel = InternalMsgBody;
    </internal>
    <internal name="settle_channel_conditionals" interface="payment_channel">
        settle_conditionals#66f6f069
        from_A:Bool signature:bits512 tag:# channel_id:uint128
        conditionals_to_settle:(HashmapE 32 Cell)
        = InternalMsgBody;
    </internal>
    <internal name="finish_uncooperative_channel_close" interface="payment_channel">
        finish_uncooperative_close#25432a91 = InternalMsgBody;
    </internal>
    <internal name="channel_closed" interface="payment_channel">
        channel_closed#dddc88ba channel_id:uint128 = InternalMsgBody;
    </internal>
    <internal name="elector_new_stake" interface="elector">
        new_stake#4e73744b query_id:uint64 validator_pubkey:bits256 stake_at:uint32
        max_factor:uint32 adnl_addr:bits256 signature:^bits512 = InternalMsgBody;
    </internal>
    <internal name="elector_new_stake_confirmation" interface="elector">
        new_stake_confirmation#f374484c query_id:uint64 = InternalMsgBody;
    </internal>
    <internal name="elector_recover_stake_request" interface="elector">
        recover_stake_request#47657424 query_id:uint64 = InternalMsgBody;
    </internal>
    <internal name="elector_recover_stake_response" interface="elector">
        recover_stake_response#f96f7324 query_id:uint64 = InternalMsgBody;
    </internal>


    <!--        Storage   -->
    <internal name="deploy_storage_contract" interface="storage_provider">
        deploy_storage_contract#e4748df1
        query_id:uint64 info:^TorrentInfo merkle_hash:bits256 expected_rate:Coins expected_max_span:uint32
        = InternalMsgBody;
    </internal>
    <internal name="update_pubkey" interface="storage_provider">
        update_pubkey#53f34cd6
        query_id:uint64 new_pubkey:bits256 = InternalMsgBody;
    </internal>
    <internal name="update_storage_params" interface="storage_provider">
        update_storage_params#54cbf19b
        query_id:uint64 accept_new_contracts:Bool rate_per_mb_day:Coins max_span:uint32
        minimal_file_size:uint64 maximal_file_size:uint64 = InternalMsgBody;
    </internal>
    <internal name="offer_storage_contract" interface="storage_contract">
        offer_storage_contract#107c49ef
        query_id:uint64 = InternalMsgBody;
    </internal>
    <internal name="accept_storage_contract" interface="storage_contract">
        accept_storage_contract#7a361688
        query_id:uint64 = InternalMsgBody;
    </internal>
    <internal name="storage_contract_confirmed" interface="storage_contract">
        storage_contract_confirmed#d4caedcd
        cur_lt:uint64 torrent_hash:bits256 = InternalMsgBody;
    </internal>
    <internal name="close_storage_contract" interface="storage_contract">
        close_contract#79f937ea
        query_id:uint64 = InternalMsgBody;
    </internal>
    <internal name="storage_contract_terminated" interface="storage_contract" interface="storage_provider">
        storage_contract_terminated#b6236d63
        cur_lt:uint64 torrent_hash:bits256 = InternalMsgBody;
    </internal>
    <internal name="storage_withdraw" interface="storage_contract">
        withdraw#46ed2e94
        query_id:uint64 = InternalMsgBody;
    </internal>
    <internal name="storage_reward_withdrawal" interface="storage_contract">
        reward_withdrawal#a91baf56
        query_id:uint64 = InternalMsgBody;
    </internal>
    <internal name="proof_storage" interface="storage_contract">
        proof_storage#419d5d4d
        query_id:uint64 file_dict_proof:^Cell = InternalMsgBody;
    </internal>

    <!--    Telegram    -->
    <internal name="telemint_deploy" interface="telemint">
        telemint_msg_deploy#4637289a sig:bits512 msg:TelemintUnsignedDeploy = TelemintMsg;
    </internal>
    <internal name="telemint_deploy_v2" interface="telemint">
        telemint_msg_deploy_v2#4637289b sig:bits512 msg:TelemintUnsignedDeployV2 = TelemintMsgV2;
    </internal>
    <internal name="teleitem_deploy" interface="teleitem">
        teleitem_msg_deploy#299a3e15 sender_address:MsgAddress bid:Grams username:FixedLengthText content:^Cell
        auction_config:^TeleitemAuctionConfig royalty_params:^NftRoyaltyParams = TeleitemMsg;
    </internal>
    <internal name="teleitem_start_auction" interface="teleitem">
        teleitem_msg_start_auction#487a8e81 query_id:int64 auction_config:^TeleitemAuctionConfig = TeleitemMsg;
    </internal>
    <internal name="teleitem_cancel_auction" interface="teleitem">
        teleitem_msg_cancel_auction#371638ae query_id:int64 = TeleitemMsg;
    </internal>

    <internal name="whales_nominators_withdraw">
        withdraw#da803efd query_id:int64 gas:Grams amount:Grams = Withdraw;
    </internal>
    <internal name="whales_nominators_deposit">
        deposit#7bcd1fef query_id:int64 gas:Grams = Deposit;
    </internal>
    <internal name="whales_nominators_force_kick">
        force_kick#1596920c query_id:int64 = InternalMsgBody;
    </internal>
    <internal name="whales_nominators_stake_withdraw_delayed" interface="whales_nominators" fixed_length="true">
        stake_withdraw_delayed#74bb3427 query_id:int64 = InternalMsgBody;
    </internal>
    <internal name="whales_nominators_stake_withdraw_completed" interface="whales_nominators" fixed_length="true">
        stake_withdraw_completed#23d421e1 query_id:int64 = InternalMsgBody;
    </internal>
    <internal name="whales_nominators_send_stake" interface="whales_nominators" fixed_length="true">
        send_stake#a2065f2c query_id:uint64 gas_limit:Grams stake:Grams validator_pubkey:bits256 stake_at:uint32
        max_factor:uint32 adnl_addr:bits256 signature:^bits512 = InternalMsgBody;
    </internal>
    <internal name="whales_nominators_withdraw_unowned" interface="whales_nominators" fixed_length="true">
        withdraw_unowned#251d6a98 query_id:uint64 gas_limit:Grams = InternalMsgBody;
    </internal>
    <internal name="whales_nominators_withdraw_unowned_response" interface="whales_nominators">
        withdraw_unowned_response#1d1715bf query_id:uint64 = InternalMsgBody;
    </internal>
    <internal name="whales_nominators_accept_stake" interface="whales_nominators">
        accept_stake#99a811fb query_id:uint64 members:Cell= InternalMsgBody;
    </internal>
    <internal name="whales_nominators_accept_withdraws" interface="whales_nominators">
        accept_withdraws#a19fd934 query_id:uint64 members:Cell= InternalMsgBody;
    </internal>

    <external name="wallet_signed_v3" interface="wallet_v3">
        signed#_ signature:bits512 subwallet_id:uint32 valid_until:uint32 seqno:uint32 payload:PayloadV1toV4 =
        ExternalMsgBody;
    </external>
    <external name="wallet_signed_v3" interface="wallet_v4">
        signed#_ signature:bits512 subwallet_id:uint32 valid_until:uint32 seqno:uint32 op:int8
        payload:PayloadV1toV4 = ExternalMsgBody;
    </external>
</abi>