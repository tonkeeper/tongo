package tlb
// Code autogenerated. DO NOT EDIT. 

import (
	"fmt"
	"math/big"
	"strings"

	"github.com/startfellows/tongo/boc"
)
 
type VarUInteger1 big.Int

func (u VarUInteger1) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 0)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger1) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(0)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger1(*val)
	return nil
}

func (u VarUInteger1) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger1) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger1(z)
	return nil
}

type VarUInteger2 big.Int

func (u VarUInteger2) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 1)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger2) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(1)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger2(*val)
	return nil
}

func (u VarUInteger2) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger2) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger2(z)
	return nil
}

type VarUInteger3 big.Int

func (u VarUInteger3) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 2)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger3) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(2)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger3(*val)
	return nil
}

func (u VarUInteger3) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger3) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger3(z)
	return nil
}

type VarUInteger4 big.Int

func (u VarUInteger4) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 3)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger4) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(3)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger4(*val)
	return nil
}

func (u VarUInteger4) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger4) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger4(z)
	return nil
}

type VarUInteger5 big.Int

func (u VarUInteger5) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 4)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger5) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(4)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger5(*val)
	return nil
}

func (u VarUInteger5) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger5) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger5(z)
	return nil
}

type VarUInteger6 big.Int

func (u VarUInteger6) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 5)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger6) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(5)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger6(*val)
	return nil
}

func (u VarUInteger6) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger6) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger6(z)
	return nil
}

type VarUInteger7 big.Int

func (u VarUInteger7) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 6)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger7) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(6)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger7(*val)
	return nil
}

func (u VarUInteger7) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger7) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger7(z)
	return nil
}

type VarUInteger8 big.Int

func (u VarUInteger8) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 7)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger8) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(7)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger8(*val)
	return nil
}

func (u VarUInteger8) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger8) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger8(z)
	return nil
}

type VarUInteger9 big.Int

func (u VarUInteger9) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 8)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger9) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(8)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger9(*val)
	return nil
}

func (u VarUInteger9) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger9) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger9(z)
	return nil
}

type VarUInteger10 big.Int

func (u VarUInteger10) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 9)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger10) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(9)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger10(*val)
	return nil
}

func (u VarUInteger10) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger10) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger10(z)
	return nil
}

type VarUInteger11 big.Int

func (u VarUInteger11) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 10)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger11) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(10)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger11(*val)
	return nil
}

func (u VarUInteger11) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger11) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger11(z)
	return nil
}

type VarUInteger12 big.Int

func (u VarUInteger12) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 11)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger12) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(11)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger12(*val)
	return nil
}

func (u VarUInteger12) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger12) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger12(z)
	return nil
}

type VarUInteger13 big.Int

func (u VarUInteger13) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 12)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger13) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(12)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger13(*val)
	return nil
}

func (u VarUInteger13) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger13) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger13(z)
	return nil
}

type VarUInteger14 big.Int

func (u VarUInteger14) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 13)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger14) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(13)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger14(*val)
	return nil
}

func (u VarUInteger14) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger14) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger14(z)
	return nil
}

type VarUInteger15 big.Int

func (u VarUInteger15) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 14)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger15) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(14)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger15(*val)
	return nil
}

func (u VarUInteger15) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger15) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger15(z)
	return nil
}

type VarUInteger16 big.Int

func (u VarUInteger16) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 15)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger16) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(15)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger16(*val)
	return nil
}

func (u VarUInteger16) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger16) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger16(z)
	return nil
}

type VarUInteger17 big.Int

func (u VarUInteger17) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 16)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger17) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(16)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger17(*val)
	return nil
}

func (u VarUInteger17) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger17) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger17(z)
	return nil
}

type VarUInteger18 big.Int

func (u VarUInteger18) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 17)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger18) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(17)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger18(*val)
	return nil
}

func (u VarUInteger18) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger18) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger18(z)
	return nil
}

type VarUInteger19 big.Int

func (u VarUInteger19) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 18)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger19) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(18)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger19(*val)
	return nil
}

func (u VarUInteger19) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger19) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger19(z)
	return nil
}

type VarUInteger20 big.Int

func (u VarUInteger20) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 19)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger20) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(19)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger20(*val)
	return nil
}

func (u VarUInteger20) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger20) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger20(z)
	return nil
}

type VarUInteger21 big.Int

func (u VarUInteger21) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 20)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger21) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(20)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger21(*val)
	return nil
}

func (u VarUInteger21) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger21) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger21(z)
	return nil
}

type VarUInteger22 big.Int

func (u VarUInteger22) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 21)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger22) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(21)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger22(*val)
	return nil
}

func (u VarUInteger22) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger22) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger22(z)
	return nil
}

type VarUInteger23 big.Int

func (u VarUInteger23) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 22)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger23) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(22)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger23(*val)
	return nil
}

func (u VarUInteger23) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger23) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger23(z)
	return nil
}

type VarUInteger24 big.Int

func (u VarUInteger24) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 23)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger24) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(23)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger24(*val)
	return nil
}

func (u VarUInteger24) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger24) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger24(z)
	return nil
}

type VarUInteger25 big.Int

func (u VarUInteger25) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 24)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger25) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(24)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger25(*val)
	return nil
}

func (u VarUInteger25) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger25) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger25(z)
	return nil
}

type VarUInteger26 big.Int

func (u VarUInteger26) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 25)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger26) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(25)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger26(*val)
	return nil
}

func (u VarUInteger26) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger26) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger26(z)
	return nil
}

type VarUInteger27 big.Int

func (u VarUInteger27) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 26)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger27) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(26)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger27(*val)
	return nil
}

func (u VarUInteger27) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger27) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger27(z)
	return nil
}

type VarUInteger28 big.Int

func (u VarUInteger28) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 27)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger28) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(27)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger28(*val)
	return nil
}

func (u VarUInteger28) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger28) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger28(z)
	return nil
}

type VarUInteger29 big.Int

func (u VarUInteger29) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 28)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger29) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(28)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger29(*val)
	return nil
}

func (u VarUInteger29) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger29) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger29(z)
	return nil
}

type VarUInteger30 big.Int

func (u VarUInteger30) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 29)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger30) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(29)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger30(*val)
	return nil
}

func (u VarUInteger30) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger30) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger30(z)
	return nil
}

type VarUInteger31 big.Int

func (u VarUInteger31) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 30)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger31) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(30)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger31(*val)
	return nil
}

func (u VarUInteger31) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger31) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger31(z)
	return nil
}

type VarUInteger32 big.Int

func (u VarUInteger32) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	i := big.Int(u)
	b := i.Bytes()
	err := c.WriteLimUint(len(b), 31)
	if err != nil {
		return err
	}
	return c.WriteBytes(b)
}

func (u *VarUInteger32) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	ln, err := c.ReadLimUint(31)
	if err != nil {
		return err
	}
	val, err := c.ReadBigUint(int(ln) * 8)
	if err != nil {
		return err
	}
	*u = VarUInteger32(*val)
	return nil
}

func (u VarUInteger32) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *VarUInteger32) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = VarUInteger32(z)
	return nil
}

type Uint1 uint8

func (u Uint1) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 1)
}

func (u *Uint1) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(1)
	*u = Uint1(v)
	return err
}

func (u Uint1) FixedSize() int {
	return 1
}

type Int1 int8

func (u Int1) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 1)
}

func (u *Int1) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(1)
	*u = Int1(v)
	return err
}

func (u Int1) FixedSize() int {
	return 1
}

type Uint2 uint8

func (u Uint2) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 2)
}

func (u *Uint2) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(2)
	*u = Uint2(v)
	return err
}

func (u Uint2) FixedSize() int {
	return 2
}

type Int2 int8

func (u Int2) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 2)
}

func (u *Int2) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(2)
	*u = Int2(v)
	return err
}

func (u Int2) FixedSize() int {
	return 2
}

type Uint3 uint8

func (u Uint3) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 3)
}

func (u *Uint3) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(3)
	*u = Uint3(v)
	return err
}

func (u Uint3) FixedSize() int {
	return 3
}

type Int3 int8

func (u Int3) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 3)
}

func (u *Int3) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(3)
	*u = Int3(v)
	return err
}

func (u Int3) FixedSize() int {
	return 3
}

type Uint4 uint8

func (u Uint4) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 4)
}

func (u *Uint4) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(4)
	*u = Uint4(v)
	return err
}

func (u Uint4) FixedSize() int {
	return 4
}

type Int4 int8

func (u Int4) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 4)
}

func (u *Int4) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(4)
	*u = Int4(v)
	return err
}

func (u Int4) FixedSize() int {
	return 4
}

type Uint5 uint8

func (u Uint5) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 5)
}

func (u *Uint5) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(5)
	*u = Uint5(v)
	return err
}

func (u Uint5) FixedSize() int {
	return 5
}

type Int5 int8

func (u Int5) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 5)
}

func (u *Int5) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(5)
	*u = Int5(v)
	return err
}

func (u Int5) FixedSize() int {
	return 5
}

type Uint6 uint8

func (u Uint6) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 6)
}

func (u *Uint6) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(6)
	*u = Uint6(v)
	return err
}

func (u Uint6) FixedSize() int {
	return 6
}

type Int6 int8

func (u Int6) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 6)
}

func (u *Int6) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(6)
	*u = Int6(v)
	return err
}

func (u Int6) FixedSize() int {
	return 6
}

type Uint7 uint8

func (u Uint7) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 7)
}

func (u *Uint7) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(7)
	*u = Uint7(v)
	return err
}

func (u Uint7) FixedSize() int {
	return 7
}

type Int7 int8

func (u Int7) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 7)
}

func (u *Int7) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(7)
	*u = Int7(v)
	return err
}

func (u Int7) FixedSize() int {
	return 7
}

type Uint8 uint8

func (u Uint8) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 8)
}

func (u *Uint8) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(8)
	*u = Uint8(v)
	return err
}

func (u Uint8) FixedSize() int {
	return 8
}

type Int8 int8

func (u Int8) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 8)
}

func (u *Int8) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(8)
	*u = Int8(v)
	return err
}

func (u Int8) FixedSize() int {
	return 8
}

type Uint9 uint16

func (u Uint9) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 9)
}

func (u *Uint9) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(9)
	*u = Uint9(v)
	return err
}

func (u Uint9) FixedSize() int {
	return 9
}

type Int9 int16

func (u Int9) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 9)
}

func (u *Int9) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(9)
	*u = Int9(v)
	return err
}

func (u Int9) FixedSize() int {
	return 9
}

type Uint10 uint16

func (u Uint10) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 10)
}

func (u *Uint10) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(10)
	*u = Uint10(v)
	return err
}

func (u Uint10) FixedSize() int {
	return 10
}

type Int10 int16

func (u Int10) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 10)
}

func (u *Int10) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(10)
	*u = Int10(v)
	return err
}

func (u Int10) FixedSize() int {
	return 10
}

type Uint11 uint16

func (u Uint11) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 11)
}

func (u *Uint11) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(11)
	*u = Uint11(v)
	return err
}

func (u Uint11) FixedSize() int {
	return 11
}

type Int11 int16

func (u Int11) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 11)
}

func (u *Int11) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(11)
	*u = Int11(v)
	return err
}

func (u Int11) FixedSize() int {
	return 11
}

type Uint12 uint16

func (u Uint12) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 12)
}

func (u *Uint12) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(12)
	*u = Uint12(v)
	return err
}

func (u Uint12) FixedSize() int {
	return 12
}

type Int12 int16

func (u Int12) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 12)
}

func (u *Int12) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(12)
	*u = Int12(v)
	return err
}

func (u Int12) FixedSize() int {
	return 12
}

type Uint13 uint16

func (u Uint13) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 13)
}

func (u *Uint13) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(13)
	*u = Uint13(v)
	return err
}

func (u Uint13) FixedSize() int {
	return 13
}

type Int13 int16

func (u Int13) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 13)
}

func (u *Int13) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(13)
	*u = Int13(v)
	return err
}

func (u Int13) FixedSize() int {
	return 13
}

type Uint14 uint16

func (u Uint14) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 14)
}

func (u *Uint14) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(14)
	*u = Uint14(v)
	return err
}

func (u Uint14) FixedSize() int {
	return 14
}

type Int14 int16

func (u Int14) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 14)
}

func (u *Int14) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(14)
	*u = Int14(v)
	return err
}

func (u Int14) FixedSize() int {
	return 14
}

type Uint15 uint16

func (u Uint15) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 15)
}

func (u *Uint15) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(15)
	*u = Uint15(v)
	return err
}

func (u Uint15) FixedSize() int {
	return 15
}

type Int15 int16

func (u Int15) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 15)
}

func (u *Int15) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(15)
	*u = Int15(v)
	return err
}

func (u Int15) FixedSize() int {
	return 15
}

type Uint16 uint16

func (u Uint16) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 16)
}

func (u *Uint16) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(16)
	*u = Uint16(v)
	return err
}

func (u Uint16) FixedSize() int {
	return 16
}

type Int16 int16

func (u Int16) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 16)
}

func (u *Int16) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(16)
	*u = Int16(v)
	return err
}

func (u Int16) FixedSize() int {
	return 16
}

type Uint17 uint32

func (u Uint17) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 17)
}

func (u *Uint17) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(17)
	*u = Uint17(v)
	return err
}

func (u Uint17) FixedSize() int {
	return 17
}

type Int17 int32

func (u Int17) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 17)
}

func (u *Int17) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(17)
	*u = Int17(v)
	return err
}

func (u Int17) FixedSize() int {
	return 17
}

type Uint18 uint32

func (u Uint18) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 18)
}

func (u *Uint18) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(18)
	*u = Uint18(v)
	return err
}

func (u Uint18) FixedSize() int {
	return 18
}

type Int18 int32

func (u Int18) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 18)
}

func (u *Int18) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(18)
	*u = Int18(v)
	return err
}

func (u Int18) FixedSize() int {
	return 18
}

type Uint19 uint32

func (u Uint19) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 19)
}

func (u *Uint19) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(19)
	*u = Uint19(v)
	return err
}

func (u Uint19) FixedSize() int {
	return 19
}

type Int19 int32

func (u Int19) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 19)
}

func (u *Int19) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(19)
	*u = Int19(v)
	return err
}

func (u Int19) FixedSize() int {
	return 19
}

type Uint20 uint32

func (u Uint20) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 20)
}

func (u *Uint20) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(20)
	*u = Uint20(v)
	return err
}

func (u Uint20) FixedSize() int {
	return 20
}

type Int20 int32

func (u Int20) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 20)
}

func (u *Int20) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(20)
	*u = Int20(v)
	return err
}

func (u Int20) FixedSize() int {
	return 20
}

type Uint21 uint32

func (u Uint21) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 21)
}

func (u *Uint21) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(21)
	*u = Uint21(v)
	return err
}

func (u Uint21) FixedSize() int {
	return 21
}

type Int21 int32

func (u Int21) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 21)
}

func (u *Int21) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(21)
	*u = Int21(v)
	return err
}

func (u Int21) FixedSize() int {
	return 21
}

type Uint22 uint32

func (u Uint22) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 22)
}

func (u *Uint22) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(22)
	*u = Uint22(v)
	return err
}

func (u Uint22) FixedSize() int {
	return 22
}

type Int22 int32

func (u Int22) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 22)
}

func (u *Int22) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(22)
	*u = Int22(v)
	return err
}

func (u Int22) FixedSize() int {
	return 22
}

type Uint23 uint32

func (u Uint23) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 23)
}

func (u *Uint23) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(23)
	*u = Uint23(v)
	return err
}

func (u Uint23) FixedSize() int {
	return 23
}

type Int23 int32

func (u Int23) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 23)
}

func (u *Int23) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(23)
	*u = Int23(v)
	return err
}

func (u Int23) FixedSize() int {
	return 23
}

type Uint24 uint32

func (u Uint24) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 24)
}

func (u *Uint24) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(24)
	*u = Uint24(v)
	return err
}

func (u Uint24) FixedSize() int {
	return 24
}

type Int24 int32

func (u Int24) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 24)
}

func (u *Int24) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(24)
	*u = Int24(v)
	return err
}

func (u Int24) FixedSize() int {
	return 24
}

type Uint25 uint32

func (u Uint25) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 25)
}

func (u *Uint25) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(25)
	*u = Uint25(v)
	return err
}

func (u Uint25) FixedSize() int {
	return 25
}

type Int25 int32

func (u Int25) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 25)
}

func (u *Int25) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(25)
	*u = Int25(v)
	return err
}

func (u Int25) FixedSize() int {
	return 25
}

type Uint26 uint32

func (u Uint26) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 26)
}

func (u *Uint26) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(26)
	*u = Uint26(v)
	return err
}

func (u Uint26) FixedSize() int {
	return 26
}

type Int26 int32

func (u Int26) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 26)
}

func (u *Int26) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(26)
	*u = Int26(v)
	return err
}

func (u Int26) FixedSize() int {
	return 26
}

type Uint27 uint32

func (u Uint27) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 27)
}

func (u *Uint27) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(27)
	*u = Uint27(v)
	return err
}

func (u Uint27) FixedSize() int {
	return 27
}

type Int27 int32

func (u Int27) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 27)
}

func (u *Int27) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(27)
	*u = Int27(v)
	return err
}

func (u Int27) FixedSize() int {
	return 27
}

type Uint28 uint32

func (u Uint28) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 28)
}

func (u *Uint28) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(28)
	*u = Uint28(v)
	return err
}

func (u Uint28) FixedSize() int {
	return 28
}

type Int28 int32

func (u Int28) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 28)
}

func (u *Int28) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(28)
	*u = Int28(v)
	return err
}

func (u Int28) FixedSize() int {
	return 28
}

type Uint29 uint32

func (u Uint29) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 29)
}

func (u *Uint29) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(29)
	*u = Uint29(v)
	return err
}

func (u Uint29) FixedSize() int {
	return 29
}

type Int29 int32

func (u Int29) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 29)
}

func (u *Int29) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(29)
	*u = Int29(v)
	return err
}

func (u Int29) FixedSize() int {
	return 29
}

type Uint30 uint32

func (u Uint30) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 30)
}

func (u *Uint30) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(30)
	*u = Uint30(v)
	return err
}

func (u Uint30) FixedSize() int {
	return 30
}

type Int30 int32

func (u Int30) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 30)
}

func (u *Int30) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(30)
	*u = Int30(v)
	return err
}

func (u Int30) FixedSize() int {
	return 30
}

type Uint31 uint32

func (u Uint31) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 31)
}

func (u *Uint31) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(31)
	*u = Uint31(v)
	return err
}

func (u Uint31) FixedSize() int {
	return 31
}

type Int31 int32

func (u Int31) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 31)
}

func (u *Int31) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(31)
	*u = Int31(v)
	return err
}

func (u Int31) FixedSize() int {
	return 31
}

type Uint32 uint32

func (u Uint32) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 32)
}

func (u *Uint32) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(32)
	*u = Uint32(v)
	return err
}

func (u Uint32) FixedSize() int {
	return 32
}

type Int32 int32

func (u Int32) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 32)
}

func (u *Int32) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(32)
	*u = Int32(v)
	return err
}

func (u Int32) FixedSize() int {
	return 32
}

type Uint33 uint64

func (u Uint33) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 33)
}

func (u *Uint33) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(33)
	*u = Uint33(v)
	return err
}

func (u Uint33) FixedSize() int {
	return 33
}

type Int33 int64

func (u Int33) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 33)
}

func (u *Int33) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(33)
	*u = Int33(v)
	return err
}

func (u Int33) FixedSize() int {
	return 33
}

type Uint34 uint64

func (u Uint34) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 34)
}

func (u *Uint34) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(34)
	*u = Uint34(v)
	return err
}

func (u Uint34) FixedSize() int {
	return 34
}

type Int34 int64

func (u Int34) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 34)
}

func (u *Int34) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(34)
	*u = Int34(v)
	return err
}

func (u Int34) FixedSize() int {
	return 34
}

type Uint35 uint64

func (u Uint35) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 35)
}

func (u *Uint35) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(35)
	*u = Uint35(v)
	return err
}

func (u Uint35) FixedSize() int {
	return 35
}

type Int35 int64

func (u Int35) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 35)
}

func (u *Int35) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(35)
	*u = Int35(v)
	return err
}

func (u Int35) FixedSize() int {
	return 35
}

type Uint36 uint64

func (u Uint36) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 36)
}

func (u *Uint36) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(36)
	*u = Uint36(v)
	return err
}

func (u Uint36) FixedSize() int {
	return 36
}

type Int36 int64

func (u Int36) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 36)
}

func (u *Int36) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(36)
	*u = Int36(v)
	return err
}

func (u Int36) FixedSize() int {
	return 36
}

type Uint37 uint64

func (u Uint37) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 37)
}

func (u *Uint37) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(37)
	*u = Uint37(v)
	return err
}

func (u Uint37) FixedSize() int {
	return 37
}

type Int37 int64

func (u Int37) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 37)
}

func (u *Int37) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(37)
	*u = Int37(v)
	return err
}

func (u Int37) FixedSize() int {
	return 37
}

type Uint38 uint64

func (u Uint38) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 38)
}

func (u *Uint38) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(38)
	*u = Uint38(v)
	return err
}

func (u Uint38) FixedSize() int {
	return 38
}

type Int38 int64

func (u Int38) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 38)
}

func (u *Int38) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(38)
	*u = Int38(v)
	return err
}

func (u Int38) FixedSize() int {
	return 38
}

type Uint39 uint64

func (u Uint39) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 39)
}

func (u *Uint39) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(39)
	*u = Uint39(v)
	return err
}

func (u Uint39) FixedSize() int {
	return 39
}

type Int39 int64

func (u Int39) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 39)
}

func (u *Int39) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(39)
	*u = Int39(v)
	return err
}

func (u Int39) FixedSize() int {
	return 39
}

type Uint40 uint64

func (u Uint40) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 40)
}

func (u *Uint40) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(40)
	*u = Uint40(v)
	return err
}

func (u Uint40) FixedSize() int {
	return 40
}

type Int40 int64

func (u Int40) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 40)
}

func (u *Int40) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(40)
	*u = Int40(v)
	return err
}

func (u Int40) FixedSize() int {
	return 40
}

type Uint41 uint64

func (u Uint41) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 41)
}

func (u *Uint41) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(41)
	*u = Uint41(v)
	return err
}

func (u Uint41) FixedSize() int {
	return 41
}

type Int41 int64

func (u Int41) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 41)
}

func (u *Int41) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(41)
	*u = Int41(v)
	return err
}

func (u Int41) FixedSize() int {
	return 41
}

type Uint42 uint64

func (u Uint42) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 42)
}

func (u *Uint42) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(42)
	*u = Uint42(v)
	return err
}

func (u Uint42) FixedSize() int {
	return 42
}

type Int42 int64

func (u Int42) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 42)
}

func (u *Int42) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(42)
	*u = Int42(v)
	return err
}

func (u Int42) FixedSize() int {
	return 42
}

type Uint43 uint64

func (u Uint43) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 43)
}

func (u *Uint43) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(43)
	*u = Uint43(v)
	return err
}

func (u Uint43) FixedSize() int {
	return 43
}

type Int43 int64

func (u Int43) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 43)
}

func (u *Int43) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(43)
	*u = Int43(v)
	return err
}

func (u Int43) FixedSize() int {
	return 43
}

type Uint44 uint64

func (u Uint44) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 44)
}

func (u *Uint44) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(44)
	*u = Uint44(v)
	return err
}

func (u Uint44) FixedSize() int {
	return 44
}

type Int44 int64

func (u Int44) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 44)
}

func (u *Int44) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(44)
	*u = Int44(v)
	return err
}

func (u Int44) FixedSize() int {
	return 44
}

type Uint45 uint64

func (u Uint45) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 45)
}

func (u *Uint45) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(45)
	*u = Uint45(v)
	return err
}

func (u Uint45) FixedSize() int {
	return 45
}

type Int45 int64

func (u Int45) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 45)
}

func (u *Int45) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(45)
	*u = Int45(v)
	return err
}

func (u Int45) FixedSize() int {
	return 45
}

type Uint46 uint64

func (u Uint46) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 46)
}

func (u *Uint46) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(46)
	*u = Uint46(v)
	return err
}

func (u Uint46) FixedSize() int {
	return 46
}

type Int46 int64

func (u Int46) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 46)
}

func (u *Int46) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(46)
	*u = Int46(v)
	return err
}

func (u Int46) FixedSize() int {
	return 46
}

type Uint47 uint64

func (u Uint47) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 47)
}

func (u *Uint47) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(47)
	*u = Uint47(v)
	return err
}

func (u Uint47) FixedSize() int {
	return 47
}

type Int47 int64

func (u Int47) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 47)
}

func (u *Int47) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(47)
	*u = Int47(v)
	return err
}

func (u Int47) FixedSize() int {
	return 47
}

type Uint48 uint64

func (u Uint48) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 48)
}

func (u *Uint48) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(48)
	*u = Uint48(v)
	return err
}

func (u Uint48) FixedSize() int {
	return 48
}

type Int48 int64

func (u Int48) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 48)
}

func (u *Int48) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(48)
	*u = Int48(v)
	return err
}

func (u Int48) FixedSize() int {
	return 48
}

type Uint49 uint64

func (u Uint49) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 49)
}

func (u *Uint49) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(49)
	*u = Uint49(v)
	return err
}

func (u Uint49) FixedSize() int {
	return 49
}

type Int49 int64

func (u Int49) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 49)
}

func (u *Int49) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(49)
	*u = Int49(v)
	return err
}

func (u Int49) FixedSize() int {
	return 49
}

type Uint50 uint64

func (u Uint50) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 50)
}

func (u *Uint50) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(50)
	*u = Uint50(v)
	return err
}

func (u Uint50) FixedSize() int {
	return 50
}

type Int50 int64

func (u Int50) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 50)
}

func (u *Int50) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(50)
	*u = Int50(v)
	return err
}

func (u Int50) FixedSize() int {
	return 50
}

type Uint51 uint64

func (u Uint51) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 51)
}

func (u *Uint51) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(51)
	*u = Uint51(v)
	return err
}

func (u Uint51) FixedSize() int {
	return 51
}

type Int51 int64

func (u Int51) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 51)
}

func (u *Int51) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(51)
	*u = Int51(v)
	return err
}

func (u Int51) FixedSize() int {
	return 51
}

type Uint52 uint64

func (u Uint52) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 52)
}

func (u *Uint52) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(52)
	*u = Uint52(v)
	return err
}

func (u Uint52) FixedSize() int {
	return 52
}

type Int52 int64

func (u Int52) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 52)
}

func (u *Int52) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(52)
	*u = Int52(v)
	return err
}

func (u Int52) FixedSize() int {
	return 52
}

type Uint53 uint64

func (u Uint53) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 53)
}

func (u *Uint53) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(53)
	*u = Uint53(v)
	return err
}

func (u Uint53) FixedSize() int {
	return 53
}

type Int53 int64

func (u Int53) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 53)
}

func (u *Int53) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(53)
	*u = Int53(v)
	return err
}

func (u Int53) FixedSize() int {
	return 53
}

type Uint54 uint64

func (u Uint54) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 54)
}

func (u *Uint54) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(54)
	*u = Uint54(v)
	return err
}

func (u Uint54) FixedSize() int {
	return 54
}

type Int54 int64

func (u Int54) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 54)
}

func (u *Int54) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(54)
	*u = Int54(v)
	return err
}

func (u Int54) FixedSize() int {
	return 54
}

type Uint55 uint64

func (u Uint55) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 55)
}

func (u *Uint55) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(55)
	*u = Uint55(v)
	return err
}

func (u Uint55) FixedSize() int {
	return 55
}

type Int55 int64

func (u Int55) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 55)
}

func (u *Int55) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(55)
	*u = Int55(v)
	return err
}

func (u Int55) FixedSize() int {
	return 55
}

type Uint56 uint64

func (u Uint56) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 56)
}

func (u *Uint56) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(56)
	*u = Uint56(v)
	return err
}

func (u Uint56) FixedSize() int {
	return 56
}

type Int56 int64

func (u Int56) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 56)
}

func (u *Int56) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(56)
	*u = Int56(v)
	return err
}

func (u Int56) FixedSize() int {
	return 56
}

type Uint57 uint64

func (u Uint57) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 57)
}

func (u *Uint57) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(57)
	*u = Uint57(v)
	return err
}

func (u Uint57) FixedSize() int {
	return 57
}

type Int57 int64

func (u Int57) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 57)
}

func (u *Int57) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(57)
	*u = Int57(v)
	return err
}

func (u Int57) FixedSize() int {
	return 57
}

type Uint58 uint64

func (u Uint58) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 58)
}

func (u *Uint58) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(58)
	*u = Uint58(v)
	return err
}

func (u Uint58) FixedSize() int {
	return 58
}

type Int58 int64

func (u Int58) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 58)
}

func (u *Int58) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(58)
	*u = Int58(v)
	return err
}

func (u Int58) FixedSize() int {
	return 58
}

type Uint59 uint64

func (u Uint59) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 59)
}

func (u *Uint59) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(59)
	*u = Uint59(v)
	return err
}

func (u Uint59) FixedSize() int {
	return 59
}

type Int59 int64

func (u Int59) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 59)
}

func (u *Int59) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(59)
	*u = Int59(v)
	return err
}

func (u Int59) FixedSize() int {
	return 59
}

type Uint60 uint64

func (u Uint60) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 60)
}

func (u *Uint60) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(60)
	*u = Uint60(v)
	return err
}

func (u Uint60) FixedSize() int {
	return 60
}

type Int60 int64

func (u Int60) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 60)
}

func (u *Int60) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(60)
	*u = Int60(v)
	return err
}

func (u Int60) FixedSize() int {
	return 60
}

type Uint61 uint64

func (u Uint61) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 61)
}

func (u *Uint61) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(61)
	*u = Uint61(v)
	return err
}

func (u Uint61) FixedSize() int {
	return 61
}

type Int61 int64

func (u Int61) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 61)
}

func (u *Int61) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(61)
	*u = Int61(v)
	return err
}

func (u Int61) FixedSize() int {
	return 61
}

type Uint62 uint64

func (u Uint62) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 62)
}

func (u *Uint62) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(62)
	*u = Uint62(v)
	return err
}

func (u Uint62) FixedSize() int {
	return 62
}

type Int62 int64

func (u Int62) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 62)
}

func (u *Int62) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(62)
	*u = Int62(v)
	return err
}

func (u Int62) FixedSize() int {
	return 62
}

type Uint63 uint64

func (u Uint63) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 63)
}

func (u *Uint63) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(63)
	*u = Uint63(v)
	return err
}

func (u Uint63) FixedSize() int {
	return 63
}

type Int63 int64

func (u Int63) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 63)
}

func (u *Int63) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(63)
	*u = Int63(v)
	return err
}

func (u Int63) FixedSize() int {
	return 63
}

type Uint64 uint64

func (u Uint64) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteUint(uint64(u), 64)
}

func (u *Uint64) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadUint(64)
	*u = Uint64(v)
	return err
}

func (u Uint64) FixedSize() int {
	return 64
}

type Int64 int64

func (u Int64) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	return c.WriteInt(int64(u), 64)
}

func (u *Int64) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadInt(64)
	*u = Int64(v)
	return err
}

func (u Int64) FixedSize() int {
	return 64
}

type Uint128 big.Int

func (u Uint128) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	x := big.Int(u)
	return c.WriteBigUint(&x, 128)
}

func (u *Uint128) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadBigUint(128)
	*u = Uint128(*v)
	return err
}

func (u Uint128) FixedSize() int {
	return 128
}

func (u Uint128) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *Uint128) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = Uint128(z)
	return nil
}

type Int128 big.Int

func (u Int128) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	x := big.Int(u)
	return c.WriteBigInt(&x, 128)
}

func (u *Int128) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadBigInt(128)
	*u = Int128(*v)
	return err
}

func (u Int128) FixedSize() int {
	return 128
}

func (u Int128) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *Int128) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = Int128(z)
	return nil
}

type Uint256 big.Int

func (u Uint256) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	x := big.Int(u)
	return c.WriteBigUint(&x, 256)
}

func (u *Uint256) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadBigUint(256)
	*u = Uint256(*v)
	return err
}

func (u Uint256) FixedSize() int {
	return 256
}

func (u Uint256) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *Uint256) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = Uint256(z)
	return nil
}

type Int256 big.Int

func (u Int256) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	x := big.Int(u)
	return c.WriteBigInt(&x, 256)
}

func (u *Int256) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadBigInt(256)
	*u = Int256(*v)
	return err
}

func (u Int256) FixedSize() int {
	return 256
}

func (u Int256) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *Int256) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = Int256(z)
	return nil
}

type Uint257 big.Int

func (u Uint257) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	x := big.Int(u)
	return c.WriteBigUint(&x, 257)
}

func (u *Uint257) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadBigUint(257)
	*u = Uint257(*v)
	return err
}

func (u Uint257) FixedSize() int {
	return 257
}

func (u Uint257) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *Uint257) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = Uint257(z)
	return nil
}

type Int257 big.Int

func (u Int257) MarshalTLB(c *boc.Cell, encoder *Encoder) error {
	x := big.Int(u)
	return c.WriteBigInt(&x, 257)
}

func (u *Int257) UnmarshalTLB(c *boc.Cell, decoder *Decoder) error {
	v, err := c.ReadBigInt(257)
	*u = Int257(*v)
	return err
}

func (u Int257) FixedSize() int {
	return 257
}

func (u Int257) MarshalJSON() ([]byte, error) {
	i := big.Int(u)
	return []byte(fmt.Sprintf("\"%s\"", i.String())), nil
}

func (u *Int257) UnmarshalJSON(p []byte) error {
	var z big.Int
	_, ok := z.SetString(strings.Trim(string(p), "\""), 10)
	if !ok {
		return fmt.Errorf("invalid integer: %s", p)
	}
	*u = Int257(z)
	return nil
}

type Bits96 [12]byte

func (u Bits96) FixedSize() int {
	return 96
}

type Bits256 [32]byte

func (u Bits256) FixedSize() int {
	return 256
}

type Bits264 [33]byte

func (u Bits264) FixedSize() int {
	return 264
}

type Bits320 [40]byte

func (u Bits320) FixedSize() int {
	return 320
}

type Bits352 [44]byte

func (u Bits352) FixedSize() int {
	return 352
}

type Bits512 [64]byte

func (u Bits512) FixedSize() int {
	return 512
}
	